/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FacetCutStruct = {
  facetAddress: string;
  action: BigNumberish;
  functionSelectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  facetAddress: string;
  action: number;
  functionSelectors: string[];
};

export type FacetStruct = {
  facetAddress: string;
  functionSelectors: BytesLike[];
};

export type FacetStructOutput = [string, string[]] & {
  facetAddress: string;
  functionSelectors: string[];
};

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type ArmyStruct = {
  owner: string;
  troopIds: BigNumberish[];
  lastMoved: BigNumberish;
  lastLargeActionTaken: BigNumberish;
  pos: PositionStruct;
};

export type ArmyStructOutput = [
  string,
  BigNumber[],
  BigNumber,
  BigNumber,
  PositionStructOutput
] & {
  owner: string;
  troopIds: BigNumber[];
  lastMoved: BigNumber;
  lastLargeActionTaken: BigNumber;
  pos: PositionStructOutput;
};

export type TroopStruct = {
  armyId: BigNumberish;
  troopTypeId: BigNumberish;
  health: BigNumberish;
};

export type TroopStructOutput = [BigNumber, BigNumber, BigNumber] & {
  armyId: BigNumber;
  troopTypeId: BigNumber;
  health: BigNumber;
};

export type BaseStruct = {
  name: BigNumberish;
  owner: string;
  attackFactor: BigNumberish;
  defenseFactor: BigNumberish;
  health: BigNumberish;
  goldGenerationPerSecond: BigNumberish;
  oilGenerationPerSecond: BigNumberish;
  pos: PositionStruct;
};

export type BaseStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  PositionStructOutput
] & {
  name: number;
  owner: string;
  attackFactor: BigNumber;
  defenseFactor: BigNumber;
  health: BigNumber;
  goldGenerationPerSecond: BigNumber;
  oilGenerationPerSecond: BigNumber;
  pos: PositionStructOutput;
};

export type TroopTypeStruct = {
  name: BigNumberish;
  maxHealth: BigNumberish;
  damagePerHit: BigNumberish;
  attackFactor: BigNumberish;
  defenseFactor: BigNumberish;
  movementCooldown: BigNumberish;
  largeActionCooldown: BigNumberish;
  goldPrice: BigNumberish;
  oilConsumptionPerSecond: BigNumberish;
};

export type TroopTypeStructOutput = [
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  name: number;
  maxHealth: BigNumber;
  damagePerHit: BigNumber;
  attackFactor: BigNumber;
  defenseFactor: BigNumber;
  movementCooldown: BigNumber;
  largeActionCooldown: BigNumber;
  goldPrice: BigNumber;
  oilConsumptionPerSecond: BigNumber;
};

export type TileStruct = {
  isInitialized: boolean;
  terrain: BigNumberish;
  occupantId: BigNumberish;
  baseId: BigNumberish;
};

export type TileStructOutput = [boolean, number, BigNumber, BigNumber] & {
  isInitialized: boolean;
  terrain: number;
  occupantId: BigNumber;
  baseId: BigNumber;
};

export type PlayerStruct = {
  initTimestamp: BigNumberish;
  active: boolean;
  goldBalance: BigNumberish;
  totalGoldGenerationPerUpdate: BigNumberish;
  totalOilGenerationPerUpdate: BigNumberish;
  totalOilConsumptionPerUpdate: BigNumberish;
  balanceLastUpdated: BigNumberish;
  numOwnedBases: BigNumberish;
  numOwnedTroops: BigNumberish;
  isDebuffed: boolean;
};

export type PlayerStructOutput = [
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  initTimestamp: BigNumber;
  active: boolean;
  goldBalance: BigNumber;
  totalGoldGenerationPerUpdate: BigNumber;
  totalOilGenerationPerUpdate: BigNumber;
  totalOilConsumptionPerUpdate: BigNumber;
  balanceLastUpdated: BigNumber;
  numOwnedBases: BigNumber;
  numOwnedTroops: BigNumber;
  isDebuffed: boolean;
};

export type WorldConstantsStruct = {
  admin: string;
  worldWidth: BigNumberish;
  worldHeight: BigNumberish;
  combatEfficiency: BigNumberish;
  numInitTerrainTypes: BigNumberish;
  initBatchSize: BigNumberish;
  initPlayerGoldBalance: BigNumberish;
  initPlayerOilBalance: BigNumberish;
  maxBaseCountPerPlayer: BigNumberish;
  maxTroopCountPerPlayer: BigNumberish;
  maxPlayerCount: BigNumberish;
  defaultBaseGoldGenerationPerSecond: BigNumberish;
  defaultWellOilGenerationPerSecond: BigNumberish;
  debuffFactor: BigNumberish;
};

export type WorldConstantsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  admin: string;
  worldWidth: BigNumber;
  worldHeight: BigNumber;
  combatEfficiency: BigNumber;
  numInitTerrainTypes: BigNumber;
  initBatchSize: BigNumber;
  initPlayerGoldBalance: BigNumber;
  initPlayerOilBalance: BigNumber;
  maxBaseCountPerPlayer: BigNumber;
  maxTroopCountPerPlayer: BigNumber;
  maxPlayerCount: BigNumber;
  defaultBaseGoldGenerationPerSecond: BigNumber;
  defaultWellOilGenerationPerSecond: BigNumber;
  debuffFactor: BigNumber;
};

export interface CurioInterface extends utils.Interface {
  functions: {
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "deleteTroop(uint256)": FunctionFragment;
    "initializePlayer((uint256,uint256))": FunctionFragment;
    "march(uint256,(uint256,uint256))": FunctionFragment;
    "moveTroop(uint256,(uint256,uint256))": FunctionFragment;
    "purchaseTroop((uint256,uint256),uint256)": FunctionFragment;
    "bulkGetAllArmies()": FunctionFragment;
    "bulkGetAllTroops()": FunctionFragment;
    "getArmy(uint256)": FunctionFragment;
    "getArmyAt((uint256,uint256))": FunctionFragment;
    "getBase(uint256)": FunctionFragment;
    "getBaseAt((uint256,uint256))": FunctionFragment;
    "getBaseNonce()": FunctionFragment;
    "getBulkBase(uint256,uint256)": FunctionFragment;
    "getBulkTroopTypes(uint256,uint256)": FunctionFragment;
    "getMapChunk((uint256,uint256),uint256)": FunctionFragment;
    "getPlayer(address)": FunctionFragment;
    "getPlayerCount()": FunctionFragment;
    "getTileAt((uint256,uint256))": FunctionFragment;
    "getTroop(uint256)": FunctionFragment;
    "getTroopType(uint256)": FunctionFragment;
    "getWorldConstants()": FunctionFragment;
    "isPlayerInitialized(address)": FunctionFragment;
    "bulkInitializeTiles((uint256,uint256)[])": FunctionFragment;
    "pauseGame()": FunctionFragment;
    "reactivatePlayer(address)": FunctionFragment;
    "resumeGame()": FunctionFragment;
    "spawnTroop((uint256,uint256),address,uint256)": FunctionFragment;
    "storeEncodedColumnBatches(uint256[][])": FunctionFragment;
    "transferBaseOwnership((uint256,uint256),address)": FunctionFragment;
    "updatePlayerBalances(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "_getArmy(uint256)": FunctionFragment;
    "_getArmyAttackFactor(uint256[])": FunctionFragment;
    "_getArmyDamagePerHit(uint256[])": FunctionFragment;
    "_getArmyDefenseFactor(uint256[])": FunctionFragment;
    "_getArmyHealth(uint256[])": FunctionFragment;
    "_getArmyLargeActionCooldown(uint256[])": FunctionFragment;
    "_getArmyMovementCooldown(uint256[])": FunctionFragment;
    "_getArmyOilConsumptionPerSecond(uint256[])": FunctionFragment;
    "_getAttackFactor(uint256)": FunctionFragment;
    "_getBase(uint256)": FunctionFragment;
    "_getBaseHealth(uint256)": FunctionFragment;
    "_getBaseOwner(uint256)": FunctionFragment;
    "_getDamagePerHit(uint256)": FunctionFragment;
    "_getDefenseFactor(uint256)": FunctionFragment;
    "_getLargeActionCooldown(uint256)": FunctionFragment;
    "_getMaxHealth(uint256)": FunctionFragment;
    "_getMovementCooldown(uint256)": FunctionFragment;
    "_getOilConsumptionPerSecond(uint256)": FunctionFragment;
    "_getPlayer(address)": FunctionFragment;
    "_getPlayerCount()": FunctionFragment;
    "_getPlayerGoldBalance(address)": FunctionFragment;
    "_getTileAt((uint256,uint256))": FunctionFragment;
    "_getTotalGoldGenerationPerUpdate(address)": FunctionFragment;
    "_getTroop(uint256)": FunctionFragment;
    "_getTroopGoldPrice(uint256)": FunctionFragment;
    "_getTroopName(uint256)": FunctionFragment;
    "_hasPort((bool,uint8,uint256,uint256))": FunctionFragment;
    "_inBound((uint256,uint256))": FunctionFragment;
    "_isDebuffed(address)": FunctionFragment;
    "_isPlayerActive(address)": FunctionFragment;
    "_isPlayerInitialized(address)": FunctionFragment;
    "_random(uint256,uint256)": FunctionFragment;
    "_samePos((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "_strike(uint256,uint256)": FunctionFragment;
    "_withinDist((uint256,uint256),(uint256,uint256),uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTroop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "march",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "moveTroop",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTroop",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetAllArmies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetAllTroops",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArmy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArmyAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBulkBase",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBulkTroopTypes",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMapChunk",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPlayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTroopType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInitialized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkInitializeTiles",
    values: [PositionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "pauseGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivatePlayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spawnTroop",
    values: [PositionStruct, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeEncodedColumnBatches",
    values: [BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBaseOwnership",
    values: [PositionStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlayerBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyAttackFactor",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyDamagePerHit",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyDefenseFactor",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyHealth",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyLargeActionCooldown",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyMovementCooldown",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyOilConsumptionPerSecond",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAttackFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBaseHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBaseOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getDamagePerHit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getDefenseFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getLargeActionCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMaxHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMovementCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getOilConsumptionPerSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_getPlayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getPlayerGoldBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTotalGoldGenerationPerUpdate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTroop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTroopGoldPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTroopName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_hasPort",
    values: [TileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_inBound",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(functionFragment: "_isDebuffed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_isPlayerActive",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_isPlayerInitialized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_random",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_samePos",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_strike",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_withinDist",
    values: [PositionStruct, PositionStruct, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTroop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "march", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveTroop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTroop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetAllArmies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetAllTroops",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getArmy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getArmyAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBaseAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBulkBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBulkTroopTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMapChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTileAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTroop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTroopType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorldConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkInitializeTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivatePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resumeGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spawnTroop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeEncodedColumnBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBaseOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlayerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getArmy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyAttackFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyDamagePerHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyDefenseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyLargeActionCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyMovementCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyOilConsumptionPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAttackFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getBaseHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getBaseOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getDamagePerHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getDefenseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getLargeActionCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMaxHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMovementCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getOilConsumptionPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPlayerGoldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getTileAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getTotalGoldGenerationPerUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getTroop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getTroopGoldPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getTroopName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_hasPort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_inBound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_isDebuffed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isPlayerActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isPlayerInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_random", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_samePos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_strike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_withinDist",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ArmyDeath(address,uint256)": EventFragment;
    "AttackedArmy(address,uint256,tuple,tuple[],uint256,tuple,tuple[])": EventFragment;
    "BaseInfo(address,uint256,tuple)": EventFragment;
    "GamePaused()": EventFragment;
    "GameResumed()": EventFragment;
    "MovedArmy(address,uint256,tuple,uint256,tuple,tuple,uint256,tuple)": EventFragment;
    "NewPlayer(address,tuple)": EventFragment;
    "NewTroop(address,uint256,tuple,uint256,tuple)": EventFragment;
    "PlayerInfo(address,tuple)": EventFragment;
    "PlayerReactivated(address)": EventFragment;
    "TroopDeath(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArmyDeath"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttackedArmy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GamePaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MovedArmy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTroop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlayerReactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TroopDeath"): EventFragment;
}

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { _diamondCut: FacetCutStructOutput[]; _init: string; _calldata: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ArmyDeathEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _armyId: BigNumber }
>;

export type ArmyDeathEventFilter = TypedEventFilter<ArmyDeathEvent>;

export type AttackedArmyEvent = TypedEvent<
  [
    string,
    BigNumber,
    ArmyStructOutput,
    TroopStructOutput[],
    BigNumber,
    ArmyStructOutput,
    TroopStructOutput[]
  ],
  {
    _player: string;
    _armyId: BigNumber;
    _armyInfo: ArmyStructOutput;
    _armyTroops: TroopStructOutput[];
    _targetArmy: BigNumber;
    _targetArmyInfo: ArmyStructOutput;
    _targetArmyTroops: TroopStructOutput[];
  }
>;

export type AttackedArmyEventFilter = TypedEventFilter<AttackedArmyEvent>;

export type BaseInfoEvent = TypedEvent<
  [string, BigNumber, BaseStructOutput],
  { _player: string; _baseId: BigNumber; _Base: BaseStructOutput }
>;

export type BaseInfoEventFilter = TypedEventFilter<BaseInfoEvent>;

export type GamePausedEvent = TypedEvent<[], {}>;

export type GamePausedEventFilter = TypedEventFilter<GamePausedEvent>;

export type GameResumedEvent = TypedEvent<[], {}>;

export type GameResumedEventFilter = TypedEventFilter<GameResumedEvent>;

export type MovedArmyEvent = TypedEvent<
  [
    string,
    BigNumber,
    PositionStructOutput,
    BigNumber,
    ArmyStructOutput,
    PositionStructOutput,
    BigNumber,
    ArmyStructOutput
  ],
  {
    _player: string;
    timestamp: BigNumber;
    _startPos: PositionStructOutput;
    _startTileArmyId: BigNumber;
    _startTileArmy: ArmyStructOutput;
    _endPos: PositionStructOutput;
    _targetTileArmyId: BigNumber;
    _targetTileArmy: ArmyStructOutput;
  }
>;

export type MovedArmyEventFilter = TypedEventFilter<MovedArmyEvent>;

export type NewPlayerEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _pos: PositionStructOutput }
>;

export type NewPlayerEventFilter = TypedEventFilter<NewPlayerEvent>;

export type NewTroopEvent = TypedEvent<
  [string, BigNumber, TroopStructOutput, BigNumber, ArmyStructOutput],
  {
    _player: string;
    _troopId: BigNumber;
    _troop: TroopStructOutput;
    _armyId: BigNumber;
    _army: ArmyStructOutput;
  }
>;

export type NewTroopEventFilter = TypedEventFilter<NewTroopEvent>;

export type PlayerInfoEvent = TypedEvent<
  [string, PlayerStructOutput],
  { _addr: string; _player: PlayerStructOutput }
>;

export type PlayerInfoEventFilter = TypedEventFilter<PlayerInfoEvent>;

export type PlayerReactivatedEvent = TypedEvent<[string], { _player: string }>;

export type PlayerReactivatedEventFilter =
  TypedEventFilter<PlayerReactivatedEvent>;

export type TroopDeathEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _troopId: BigNumber }
>;

export type TroopDeathEventFilter = TypedEventFilter<TroopDeathEvent>;

export interface Curio extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurioInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _facetFunctionSelectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { facets_: FacetStructOutput[] }>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deleteTroop(
      _troopId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    march(
      _armyId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveTroop(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseTroop(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkGetAllArmies(overrides?: CallOverrides): Promise<[ArmyStructOutput[]]>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<[TroopStructOutput[]]>;

    getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ArmyStructOutput]>;

    getArmyAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[ArmyStructOutput]>;

    getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BaseStructOutput]>;

    getBaseAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[BaseStructOutput]>;

    getBaseNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBulkBase(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BaseStructOutput[]]>;

    getBulkTroopTypes(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TroopTypeStructOutput[]]>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    getPlayer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[PlayerStructOutput]>;

    getPlayerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput]>;

    getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TroopStructOutput]>;

    getTroopType(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TroopTypeStructOutput]>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<[WorldConstantsStructOutput]>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reactivatePlayer(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resumeGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spawnTroop(
      _pos: PositionStruct,
      _player: string,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBaseOwnership(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePlayerBalances(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ArmyStructOutput]>;

    _getArmyAttackFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyDamagePerHit(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyDefenseFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyHealth(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyLargeActionCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyMovementCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyOilConsumptionPerSecond(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BaseStructOutput]>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getLargeActionCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getOilConsumptionPerSecond(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getPlayer(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[PlayerStructOutput]>;

    _getPlayerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _getPlayerGoldBalance(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput]>;

    _getTotalGoldGenerationPerUpdate(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TroopStructOutput]>;

    _getTroopGoldPrice(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getTroopName(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<[boolean]>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<[boolean]>;

    _isDebuffed(_player: string, overrides?: CallOverrides): Promise<[boolean]>;

    _isPlayerActive(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  diamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deleteTroop(
    _troopId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _pos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  march(
    _armyId: BigNumberish,
    _targetPos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveTroop(
    _troopId: BigNumberish,
    _targetPos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseTroop(
    _pos: PositionStruct,
    _troopTypeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkGetAllArmies(overrides?: CallOverrides): Promise<ArmyStructOutput[]>;

  bulkGetAllTroops(overrides?: CallOverrides): Promise<TroopStructOutput[]>;

  getArmy(
    _armyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ArmyStructOutput>;

  getArmyAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<ArmyStructOutput>;

  getBase(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BaseStructOutput>;

  getBaseAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<BaseStructOutput>;

  getBaseNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getBulkBase(
    _startId: BigNumberish,
    _endId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BaseStructOutput[]>;

  getBulkTroopTypes(
    _startId: BigNumberish,
    _endId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TroopTypeStructOutput[]>;

  getMapChunk(
    _startPos: PositionStruct,
    _interval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

  getPlayer(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<PlayerStructOutput>;

  getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTileAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TileStructOutput>;

  getTroop(
    _troopId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TroopStructOutput>;

  getTroopType(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TroopTypeStructOutput>;

  getWorldConstants(
    overrides?: CallOverrides
  ): Promise<WorldConstantsStructOutput>;

  isPlayerInitialized(
    _player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bulkInitializeTiles(
    _positions: PositionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reactivatePlayer(
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resumeGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spawnTroop(
    _pos: PositionStruct,
    _player: string,
    _troopTypeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storeEncodedColumnBatches(
    _colBatches: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBaseOwnership(
    _pos: PositionStruct,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePlayerBalances(
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _getArmy(
    _armyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ArmyStructOutput>;

  _getArmyAttackFactor(
    _armyTroopIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyDamagePerHit(
    _armyTroopIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyDefenseFactor(
    _armyTroopIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyHealth(
    _armyTroopIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyLargeActionCooldown(
    _armyTroopIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyMovementCooldown(
    _armyTroopIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyOilConsumptionPerSecond(
    _armyTroopIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getAttackFactor(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getBase(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BaseStructOutput>;

  _getBaseHealth(
    _baseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getBaseOwner(
    _baseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _getDamagePerHit(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getDefenseFactor(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getLargeActionCooldown(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getMaxHealth(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getMovementCooldown(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getOilConsumptionPerSecond(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getPlayer(
    _player: string,
    overrides?: CallOverrides
  ): Promise<PlayerStructOutput>;

  _getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

  _getPlayerGoldBalance(
    _player: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getTileAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TileStructOutput>;

  _getTotalGoldGenerationPerUpdate(
    _player: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getTroop(
    _troopId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TroopStructOutput>;

  _getTroopGoldPrice(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getTroopName(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<boolean>;

  _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

  _isDebuffed(_player: string, overrides?: CallOverrides): Promise<boolean>;

  _isPlayerActive(_player: string, overrides?: CallOverrides): Promise<boolean>;

  _isPlayerInitialized(
    _player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _random(
    _max: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _samePos(
    _p1: PositionStruct,
    _p2: PositionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _strike(
    _strikeFactor: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _withinDist(
    _p1: PositionStruct,
    _p2: PositionStruct,
    _dist: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializePlayer(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    march(
      _armyId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    moveTroop(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseTroop(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bulkGetAllArmies(overrides?: CallOverrides): Promise<ArmyStructOutput[]>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<TroopStructOutput[]>;

    getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ArmyStructOutput>;

    getArmyAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<ArmyStructOutput>;

    getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BaseStructOutput>;

    getBaseAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BaseStructOutput>;

    getBaseNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getBulkBase(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BaseStructOutput[]>;

    getBulkTroopTypes(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TroopTypeStructOutput[]>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    getPlayer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PlayerStructOutput>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TileStructOutput>;

    getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TroopStructOutput>;

    getTroopType(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TroopTypeStructOutput>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<WorldConstantsStructOutput>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    pauseGame(overrides?: CallOverrides): Promise<void>;

    reactivatePlayer(_player: string, overrides?: CallOverrides): Promise<void>;

    resumeGame(overrides?: CallOverrides): Promise<void>;

    spawnTroop(
      _pos: PositionStruct,
      _player: string,
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    transferBaseOwnership(
      _pos: PositionStruct,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlayerBalances(
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ArmyStructOutput>;

    _getArmyAttackFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDamagePerHit(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDefenseFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyHealth(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyLargeActionCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyMovementCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyOilConsumptionPerSecond(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BaseStructOutput>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getLargeActionCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getOilConsumptionPerSecond(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPlayer(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PlayerStructOutput>;

    _getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    _getPlayerGoldBalance(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TileStructOutput>;

    _getTotalGoldGenerationPerUpdate(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TroopStructOutput>;

    _getTroopGoldPrice(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTroopName(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<boolean>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

    _isDebuffed(_player: string, overrides?: CallOverrides): Promise<boolean>;

    _isPlayerActive(
      _player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ArmyDeath(address,uint256)"(
      _player?: null,
      _armyId?: null
    ): ArmyDeathEventFilter;
    ArmyDeath(_player?: null, _armyId?: null): ArmyDeathEventFilter;

    "AttackedArmy(address,uint256,tuple,tuple[],uint256,tuple,tuple[])"(
      _player?: null,
      _armyId?: null,
      _armyInfo?: null,
      _armyTroops?: null,
      _targetArmy?: null,
      _targetArmyInfo?: null,
      _targetArmyTroops?: null
    ): AttackedArmyEventFilter;
    AttackedArmy(
      _player?: null,
      _armyId?: null,
      _armyInfo?: null,
      _armyTroops?: null,
      _targetArmy?: null,
      _targetArmyInfo?: null,
      _targetArmyTroops?: null
    ): AttackedArmyEventFilter;

    "BaseInfo(address,uint256,tuple)"(
      _player?: null,
      _baseId?: null,
      _Base?: null
    ): BaseInfoEventFilter;
    BaseInfo(_player?: null, _baseId?: null, _Base?: null): BaseInfoEventFilter;

    "GamePaused()"(): GamePausedEventFilter;
    GamePaused(): GamePausedEventFilter;

    "GameResumed()"(): GameResumedEventFilter;
    GameResumed(): GameResumedEventFilter;

    "MovedArmy(address,uint256,tuple,uint256,tuple,tuple,uint256,tuple)"(
      _player?: null,
      timestamp?: null,
      _startPos?: null,
      _startTileArmyId?: null,
      _startTileArmy?: null,
      _endPos?: null,
      _targetTileArmyId?: null,
      _targetTileArmy?: null
    ): MovedArmyEventFilter;
    MovedArmy(
      _player?: null,
      timestamp?: null,
      _startPos?: null,
      _startTileArmyId?: null,
      _startTileArmy?: null,
      _endPos?: null,
      _targetTileArmyId?: null,
      _targetTileArmy?: null
    ): MovedArmyEventFilter;

    "NewPlayer(address,tuple)"(
      _player?: null,
      _pos?: null
    ): NewPlayerEventFilter;
    NewPlayer(_player?: null, _pos?: null): NewPlayerEventFilter;

    "NewTroop(address,uint256,tuple,uint256,tuple)"(
      _player?: null,
      _troopId?: null,
      _troop?: null,
      _armyId?: null,
      _army?: null
    ): NewTroopEventFilter;
    NewTroop(
      _player?: null,
      _troopId?: null,
      _troop?: null,
      _armyId?: null,
      _army?: null
    ): NewTroopEventFilter;

    "PlayerInfo(address,tuple)"(
      _addr?: null,
      _player?: null
    ): PlayerInfoEventFilter;
    PlayerInfo(_addr?: null, _player?: null): PlayerInfoEventFilter;

    "PlayerReactivated(address)"(_player?: null): PlayerReactivatedEventFilter;
    PlayerReactivated(_player?: null): PlayerReactivatedEventFilter;

    "TroopDeath(address,uint256)"(
      _player?: null,
      _troopId?: null
    ): TroopDeathEventFilter;
    TroopDeath(_player?: null, _troopId?: null): TroopDeathEventFilter;
  };

  estimateGas: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteTroop(
      _troopId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    march(
      _armyId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveTroop(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseTroop(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkGetAllArmies(overrides?: CallOverrides): Promise<BigNumber>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<BigNumber>;

    getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArmyAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBase(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getBulkBase(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBulkTroopTypes(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayer(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTroopType(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldConstants(overrides?: CallOverrides): Promise<BigNumber>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reactivatePlayer(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resumeGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spawnTroop(
      _pos: PositionStruct,
      _player: string,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBaseOwnership(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePlayerBalances(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyAttackFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDamagePerHit(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDefenseFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyHealth(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyLargeActionCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyMovementCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyOilConsumptionPerSecond(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBase(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getLargeActionCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getOilConsumptionPerSecond(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPlayer(_player: string, overrides?: CallOverrides): Promise<BigNumber>;

    _getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    _getPlayerGoldBalance(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTotalGoldGenerationPerUpdate(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTroopGoldPrice(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTroopName(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<BigNumber>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    _isDebuffed(_player: string, overrides?: CallOverrides): Promise<BigNumber>;

    _isPlayerActive(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteTroop(
      _troopId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    march(
      _armyId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveTroop(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseTroop(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkGetAllArmies(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArmyAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBulkBase(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBulkTroopTypes(
      _startId: BigNumberish,
      _endId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayer(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTroopType(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorldConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reactivatePlayer(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resumeGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spawnTroop(
      _pos: PositionStruct,
      _player: string,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBaseOwnership(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePlayerBalances(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _getArmy(
      _armyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyAttackFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyDamagePerHit(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyDefenseFactor(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyHealth(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyLargeActionCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyMovementCooldown(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyOilConsumptionPerSecond(
      _armyTroopIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getLargeActionCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getOilConsumptionPerSecond(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPlayer(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPlayerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getPlayerGoldBalance(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTotalGoldGenerationPerUpdate(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTroopGoldPrice(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTroopName(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hasPort(
      _tile: TileStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inBound(
      _p: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isDebuffed(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isPlayerActive(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
