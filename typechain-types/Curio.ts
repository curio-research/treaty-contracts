/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FacetCutStruct = {
  facetAddress: string;
  action: BigNumberish;
  functionSelectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  facetAddress: string;
  action: number;
  functionSelectors: string[];
};

export type FacetStruct = {
  facetAddress: string;
  functionSelectors: BytesLike[];
};

export type FacetStructOutput = [string, string[]] & {
  facetAddress: string;
  functionSelectors: string[];
};

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type BlockDataStruct = {
  blockId: BigNumberish;
  health: BigNumberish;
  owner: string;
  lastAttacked: BigNumberish;
  lastMoved: BigNumberish;
  occupiable: boolean;
};

export type BlockDataStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  blockId: BigNumber;
  health: BigNumber;
  owner: string;
  lastAttacked: BigNumber;
  lastMoved: BigNumber;
  occupiable: boolean;
};

export type TileStruct = {
  occupier: string;
  worldBlockId: BigNumberish;
  tileType: BigNumberish;
  lastOccupied: BigNumberish;
  tileContractId: BigNumberish;
};

export type TileStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  occupier: string;
  worldBlockId: BigNumber;
  tileType: BigNumber;
  lastOccupied: BigNumber;
  tileContractId: BigNumber;
};

export type ItemStruct = {
  mineable: boolean;
  craftable: boolean;
  occupiable: boolean;
  health: BigNumberish;
  mineItemIds: BigNumberish[];
  craftItemIds: BigNumberish[];
  craftItemAmounts: BigNumberish[];
  moveCooldown: BigNumberish;
  attackDamage: BigNumberish;
  attackRange: BigNumberish;
  attackCooldown: BigNumberish;
  programmable: boolean;
  abiEncoding: string;
  contractAddr: string;
};

export type ItemStructOutput = [
  boolean,
  boolean,
  boolean,
  BigNumber,
  BigNumber[],
  BigNumber[],
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  string,
  string
] & {
  mineable: boolean;
  craftable: boolean;
  occupiable: boolean;
  health: BigNumber;
  mineItemIds: BigNumber[];
  craftItemIds: BigNumber[];
  craftItemAmounts: BigNumber[];
  moveCooldown: BigNumber;
  attackDamage: BigNumber;
  attackRange: BigNumber;
  attackCooldown: BigNumber;
  programmable: boolean;
  abiEncoding: string;
  contractAddr: string;
};

export type PlayerDataStruct = {
  initialized: boolean;
  initTimestamp: BigNumberish;
  playerAddr: string;
  health: BigNumberish;
  reach: BigNumberish;
  lastMoved: BigNumberish;
  position: PositionStruct;
};

export type PlayerDataStructOutput = [
  boolean,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  PositionStructOutput
] & {
  initialized: boolean;
  initTimestamp: BigNumber;
  playerAddr: string;
  health: BigNumber;
  reach: BigNumber;
  lastMoved: BigNumber;
  position: PositionStructOutput;
};

export type TowerStruct = {
  rewardPerEpoch: BigNumberish;
  itemId: BigNumberish;
  lastCapturedEpoch: BigNumberish;
  owner: string;
};

export type TowerStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
  rewardPerEpoch: BigNumber;
  itemId: BigNumber;
  lastCapturedEpoch: BigNumber;
  owner: string;
};

export interface CurioInterface extends utils.Interface {
  functions: {
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "attack((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "craft(uint256)": FunctionFragment;
    "initializePlayer((uint256,uint256),uint256)": FunctionFragment;
    "mine((uint256,uint256))": FunctionFragment;
    "move((uint256,uint256))": FunctionFragment;
    "moveBlock((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "place((uint256,uint256),uint256)": FunctionFragment;
    "updateEpoch()": FunctionFragment;
    "_getBlockChunkData((uint256,uint256))": FunctionFragment;
    "_getMap((uint256,uint256))": FunctionFragment;
    "bulkGetAllItems()": FunctionFragment;
    "bulkGetAllPlayerData()": FunctionFragment;
    "getMapInterval()": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "addTower((uint256,uint256),(uint256,uint256,uint256,address))": FunctionFragment;
    "addTowerBulk((uint256,uint256)[],(uint256,uint256,uint256,address)[])": FunctionFragment;
    "capture((uint256,uint256))": FunctionFragment;
    "claimReward((uint256,uint256))": FunctionFragment;
    "getTowerById((uint256,uint256))": FunctionFragment;
    "isValidCapture(address,(uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "attack",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(functionFragment: "craft", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mine",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "moveBlock",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getBlockChunkData",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMap",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetAllItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetAllPlayerData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addTower",
    values: [PositionStruct, TowerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addTowerBulk",
    values: [PositionStruct[], TowerStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "capture",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTowerById",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCapture",
    values: [string, PositionStruct]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "craft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getBlockChunkData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetAllItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetAllPlayerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addTower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTowerBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "capture", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTowerById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCapture",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "EventAttackItemEvent(address,tuple,tuple,uint256,uint256,uint256)": EventFragment;
    "EventChangeBlockStrength(address,tuple,uint256,uint256)": EventFragment;
    "EventCraft(address,uint256)": EventFragment;
    "EventEpochUpdate(address,uint256,uint256)": EventFragment;
    "EventMineItem(address,tuple,uint256)": EventFragment;
    "EventMove(address,tuple)": EventFragment;
    "EventMoveBlock(address,tuple,tuple,uint256,uint256)": EventFragment;
    "EventNewPlayer(address,tuple)": EventFragment;
    "EventPlace(address,tuple,uint256,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Capture(address,tuple)": EventFragment;
    "ClaimReward(address,tuple,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventAttackItemEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventChangeBlockStrength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCraft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventEpochUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMineItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMoveBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventNewPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventPlace"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Capture"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
}

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { _diamondCut: FacetCutStructOutput[]; _init: string; _calldata: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type EventAttackItemEventEvent = TypedEvent<
  [
    string,
    PositionStructOutput,
    PositionStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    _player: string;
    _origin: PositionStructOutput;
    _target: PositionStructOutput;
    _attackerWorldBlockId: BigNumber;
    _targetWorldBlockId: BigNumber;
    _strength: BigNumber;
  }
>;

export type EventAttackItemEventEventFilter =
  TypedEventFilter<EventAttackItemEventEvent>;

export type EventChangeBlockStrengthEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber, BigNumber],
  {
    _player: string;
    _pos: PositionStructOutput;
    _health: BigNumber;
    _resourceUsed: BigNumber;
  }
>;

export type EventChangeBlockStrengthEventFilter =
  TypedEventFilter<EventChangeBlockStrengthEvent>;

export type EventCraftEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _blockId: BigNumber }
>;

export type EventCraftEventFilter = TypedEventFilter<EventCraftEvent>;

export type EventEpochUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _epoch: BigNumber; _time: BigNumber }
>;

export type EventEpochUpdateEventFilter =
  TypedEventFilter<EventEpochUpdateEvent>;

export type EventMineItemEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber],
  { _player: string; _pos: PositionStructOutput; _itemId: BigNumber }
>;

export type EventMineItemEventFilter = TypedEventFilter<EventMineItemEvent>;

export type EventMoveEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _pos: PositionStructOutput }
>;

export type EventMoveEventFilter = TypedEventFilter<EventMoveEvent>;

export type EventMoveBlockEvent = TypedEvent<
  [string, PositionStructOutput, PositionStructOutput, BigNumber, BigNumber],
  {
    _player: string;
    _startPos: PositionStructOutput;
    _endPos: PositionStructOutput;
    _worldBlockId: BigNumber;
    _time: BigNumber;
  }
>;

export type EventMoveBlockEventFilter = TypedEventFilter<EventMoveBlockEvent>;

export type EventNewPlayerEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _pos: PositionStructOutput }
>;

export type EventNewPlayerEventFilter = TypedEventFilter<EventNewPlayerEvent>;

export type EventPlaceEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber, BlockDataStructOutput],
  {
    _player: string;
    _pos: PositionStructOutput;
    _worldBlockId: BigNumber;
    _blockData: BlockDataStructOutput;
  }
>;

export type EventPlaceEventFilter = TypedEventFilter<EventPlaceEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type CaptureEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _position: PositionStructOutput }
>;

export type CaptureEventFilter = TypedEventFilter<CaptureEvent>;

export type ClaimRewardEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber, BigNumber, BigNumber],
  {
    _player: string;
    _position: PositionStructOutput;
    _itemId: BigNumber;
    _itemAmount: BigNumber;
    _epoch: BigNumber;
  }
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface Curio extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurioInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _facetFunctionSelectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { facets_: FacetStructOutput[] }>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    craft(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mine(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    move(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _getBlockChunkData(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[BlockDataStructOutput[], PositionStructOutput[]]>;

    _getMap(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    bulkGetAllItems(overrides?: CallOverrides): Promise<[ItemStructOutput[]]>;

    bulkGetAllPlayerData(
      overrides?: CallOverrides
    ): Promise<[PlayerDataStructOutput[]]>;

    getMapInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    capture(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TowerStructOutput]>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  diamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  attack(
    _origin: PositionStruct,
    _target: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  craft(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _pos: PositionStruct,
    _defaultCurrencyIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mine(
    _pos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  move(
    _pos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveBlock(
    _startPos: PositionStruct,
    _targetPos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  place(
    _pos: PositionStruct,
    _blockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _getBlockChunkData(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<[BlockDataStructOutput[], PositionStructOutput[]]>;

  _getMap(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

  bulkGetAllItems(overrides?: CallOverrides): Promise<ItemStructOutput[]>;

  bulkGetAllPlayerData(
    overrides?: CallOverrides
  ): Promise<PlayerDataStructOutput[]>;

  getMapInterval(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTower(
    _position: PositionStruct,
    _tower: TowerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTowerBulk(
    _positions: PositionStruct[],
    _towers: TowerStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  capture(
    _position: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _position: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTowerById(
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TowerStructOutput>;

  isValidCapture(
    _player: string,
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    craft(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mine(_pos: PositionStruct, overrides?: CallOverrides): Promise<void>;

    move(_pos: PositionStruct, overrides?: CallOverrides): Promise<void>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEpoch(overrides?: CallOverrides): Promise<void>;

    _getBlockChunkData(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[BlockDataStructOutput[], PositionStructOutput[]]>;

    _getMap(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    bulkGetAllItems(overrides?: CallOverrides): Promise<ItemStructOutput[]>;

    bulkGetAllPlayerData(
      overrides?: CallOverrides
    ): Promise<PlayerDataStructOutput[]>;

    getMapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    capture(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TowerStructOutput>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "EventAttackItemEvent(address,tuple,tuple,uint256,uint256,uint256)"(
      _player?: null,
      _origin?: null,
      _target?: null,
      _attackerWorldBlockId?: null,
      _targetWorldBlockId?: null,
      _strength?: null
    ): EventAttackItemEventEventFilter;
    EventAttackItemEvent(
      _player?: null,
      _origin?: null,
      _target?: null,
      _attackerWorldBlockId?: null,
      _targetWorldBlockId?: null,
      _strength?: null
    ): EventAttackItemEventEventFilter;

    "EventChangeBlockStrength(address,tuple,uint256,uint256)"(
      _player?: null,
      _pos?: null,
      _health?: null,
      _resourceUsed?: null
    ): EventChangeBlockStrengthEventFilter;
    EventChangeBlockStrength(
      _player?: null,
      _pos?: null,
      _health?: null,
      _resourceUsed?: null
    ): EventChangeBlockStrengthEventFilter;

    "EventCraft(address,uint256)"(
      _player?: null,
      _blockId?: null
    ): EventCraftEventFilter;
    EventCraft(_player?: null, _blockId?: null): EventCraftEventFilter;

    "EventEpochUpdate(address,uint256,uint256)"(
      _player?: null,
      _epoch?: null,
      _time?: null
    ): EventEpochUpdateEventFilter;
    EventEpochUpdate(
      _player?: null,
      _epoch?: null,
      _time?: null
    ): EventEpochUpdateEventFilter;

    "EventMineItem(address,tuple,uint256)"(
      _player?: null,
      _pos?: null,
      _itemId?: null
    ): EventMineItemEventFilter;
    EventMineItem(
      _player?: null,
      _pos?: null,
      _itemId?: null
    ): EventMineItemEventFilter;

    "EventMove(address,tuple)"(
      _player?: null,
      _pos?: null
    ): EventMoveEventFilter;
    EventMove(_player?: null, _pos?: null): EventMoveEventFilter;

    "EventMoveBlock(address,tuple,tuple,uint256,uint256)"(
      _player?: null,
      _startPos?: null,
      _endPos?: null,
      _worldBlockId?: null,
      _time?: null
    ): EventMoveBlockEventFilter;
    EventMoveBlock(
      _player?: null,
      _startPos?: null,
      _endPos?: null,
      _worldBlockId?: null,
      _time?: null
    ): EventMoveBlockEventFilter;

    "EventNewPlayer(address,tuple)"(
      _player?: null,
      _pos?: null
    ): EventNewPlayerEventFilter;
    EventNewPlayer(_player?: null, _pos?: null): EventNewPlayerEventFilter;

    "EventPlace(address,tuple,uint256,tuple)"(
      _player?: null,
      _pos?: null,
      _worldBlockId?: null,
      _blockData?: null
    ): EventPlaceEventFilter;
    EventPlace(
      _player?: null,
      _pos?: null,
      _worldBlockId?: null,
      _blockData?: null
    ): EventPlaceEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Capture(address,tuple)"(
      _player?: null,
      _position?: null
    ): CaptureEventFilter;
    Capture(_player?: null, _position?: null): CaptureEventFilter;

    "ClaimReward(address,tuple,uint256,uint256,uint256)"(
      _player?: null,
      _position?: null,
      _itemId?: null,
      _itemAmount?: null,
      _epoch?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      _player?: null,
      _position?: null,
      _itemId?: null,
      _itemAmount?: null,
      _epoch?: null
    ): ClaimRewardEventFilter;
  };

  estimateGas: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    craft(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mine(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    move(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _getBlockChunkData(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMap(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkGetAllItems(overrides?: CallOverrides): Promise<BigNumber>;

    bulkGetAllPlayerData(overrides?: CallOverrides): Promise<BigNumber>;

    getMapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    capture(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    craft(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mine(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    move(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _getBlockChunkData(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getMap(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetAllItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkGetAllPlayerData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMapInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    capture(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
