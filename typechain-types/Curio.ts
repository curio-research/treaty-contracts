/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FacetCutStruct = {
  facetAddress: string;
  action: BigNumberish;
  functionSelectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  facetAddress: string;
  action: number;
  functionSelectors: string[];
};

export type FacetStruct = {
  facetAddress: string;
  functionSelectors: BytesLike[];
};

export type FacetStructOutput = [string, string[]] & {
  facetAddress: string;
  functionSelectors: string[];
};

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type TileStruct = { isInitializedECS: boolean; terrain: BigNumberish };

export type TileStructOutput = [boolean, number] & {
  isInitializedECS: boolean;
  terrain: number;
};

export type WorldConstantsStruct = {
  admin: string;
  worldWidth: BigNumberish;
  worldHeight: BigNumberish;
  combatEfficiency: BigNumberish;
  numInitTerrainTypes: BigNumberish;
  initBatchSize: BigNumberish;
  initPlayerGoldBalance: BigNumberish;
  initPlayerOilBalance: BigNumberish;
  maxBaseCountPerPlayer: BigNumberish;
  maxTroopCountPerPlayer: BigNumberish;
  maxPlayerCount: BigNumberish;
  defaultBaseGoldGenerationPerSecond: BigNumberish;
  defaultWellOilGenerationPerSecond: BigNumberish;
  debuffFactor: BigNumberish;
};

export type WorldConstantsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  admin: string;
  worldWidth: BigNumber;
  worldHeight: BigNumber;
  combatEfficiency: BigNumber;
  numInitTerrainTypes: BigNumber;
  initBatchSize: BigNumber;
  initPlayerGoldBalance: BigNumber;
  initPlayerOilBalance: BigNumber;
  maxBaseCountPerPlayer: BigNumber;
  maxTroopCountPerPlayer: BigNumber;
  maxPlayerCount: BigNumber;
  defaultBaseGoldGenerationPerSecond: BigNumber;
  defaultWellOilGenerationPerSecond: BigNumber;
  debuffFactor: BigNumber;
};

export interface CurioInterface extends utils.Interface {
  functions: {
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "initializePlayerECS((uint256,uint256),string)": FunctionFragment;
    "moveTroopECS(uint256,(uint256,uint256))": FunctionFragment;
    "purchaseTroopECS((uint256,uint256),uint256)": FunctionFragment;
    "getComponent(string)": FunctionFragment;
    "getComponentById(uint256)": FunctionFragment;
    "getMapChunk((uint256,uint256),uint256)": FunctionFragment;
    "getPlayerCount()": FunctionFragment;
    "getTileAt((uint256,uint256))": FunctionFragment;
    "getWorldConstants()": FunctionFragment;
    "addEntity()": FunctionFragment;
    "bulkInitializeTiles((uint256,uint256)[])": FunctionFragment;
    "registerComponents(address,string[3])": FunctionFragment;
    "setComponentValue(string,uint256,bytes)": FunctionFragment;
    "storeEncodedColumnBatches(uint256[][])": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "_concatenate(uint256[],uint256[])": FunctionFragment;
    "_difference(Set,Set)": FunctionFragment;
    "_getComponent(string)": FunctionFragment;
    "_getComponentById(uint256)": FunctionFragment;
    "_getNeighbors((uint256,uint256))": FunctionFragment;
    "_getPlayerCount()": FunctionFragment;
    "_getPlayerId(address)": FunctionFragment;
    "_getTileAt((uint256,uint256))": FunctionFragment;
    "_inBound((uint256,uint256))": FunctionFragment;
    "_random(uint256,uint256)": FunctionFragment;
    "_samePos((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "_strike(uint256,uint256)": FunctionFragment;
    "_withinDist((uint256,uint256),(uint256,uint256),uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePlayerECS",
    values: [PositionStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveTroopECS",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTroopECS",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMapChunk",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldConstants",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addEntity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bulkInitializeTiles",
    values: [PositionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponents",
    values: [string, [string, string, string]]
  ): string;
  encodeFunctionData(
    functionFragment: "setComponentValue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storeEncodedColumnBatches",
    values: [BigNumberish[][]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_concatenate",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_difference",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getComponent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getComponentById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getNeighbors",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getPlayerId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_inBound",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_random",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_samePos",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_strike",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_withinDist",
    values: [PositionStruct, PositionStruct, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayerECS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveTroopECS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTroopECS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMapChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTileAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorldConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEntity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkInitializeTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setComponentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeEncodedColumnBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_concatenate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_difference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getComponentById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getNeighbors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPlayerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getTileAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_inBound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_random", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_samePos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_strike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_withinDist",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ComponentValueSet(string,uint256,bytes)": EventFragment;
    "NewComponent(string,uint256)": EventFragment;
    "NewEntity(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentValueSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewComponent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEntity"): EventFragment;
}

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { _diamondCut: FacetCutStructOutput[]; _init: string; _calldata: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ComponentValueSetEvent = TypedEvent<
  [string, BigNumber, string],
  { _componentName: string; _entity: BigNumber; _rawValue: string }
>;

export type ComponentValueSetEventFilter =
  TypedEventFilter<ComponentValueSetEvent>;

export type NewComponentEvent = TypedEvent<
  [string, BigNumber],
  { _name: string; _id: BigNumber }
>;

export type NewComponentEventFilter = TypedEventFilter<NewComponentEvent>;

export type NewEntityEvent = TypedEvent<[BigNumber], { _entity: BigNumber }>;

export type NewEntityEventFilter = TypedEventFilter<NewEntityEvent>;

export interface Curio extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurioInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _facetFunctionSelectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { facets_: FacetStructOutput[] }>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializePlayerECS(
      _position: PositionStruct,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveTroopECS(
      _troopId: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseTroopECS(
      _position: PositionStruct,
      _troopTemplateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getComponent(_name: string, overrides?: CallOverrides): Promise<[string]>;

    getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    getPlayerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput]>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<[WorldConstantsStructOutput]>;

    addEntity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerComponents(
      _gameAddr: string,
      _componentNameList: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    _getComponent(_name: string, overrides?: CallOverrides): Promise<[string]>;

    _getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getNeighbors(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput[]]>;

    _getPlayerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    _getPlayerId(
      _playerAddr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput]>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<[boolean]>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  diamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializePlayerECS(
    _position: PositionStruct,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveTroopECS(
    _troopId: BigNumberish,
    _targetPosition: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseTroopECS(
    _position: PositionStruct,
    _troopTemplateId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

  getComponentById(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMapChunk(
    _startPos: PositionStruct,
    _interval: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

  getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTileAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TileStructOutput>;

  getWorldConstants(
    overrides?: CallOverrides
  ): Promise<WorldConstantsStructOutput>;

  addEntity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkInitializeTiles(
    _positions: PositionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerComponents(
    _gameAddr: string,
    _componentNameList: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setComponentValue(
    _componentName: string,
    _entity: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storeEncodedColumnBatches(
    _colBatches: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _concatenate(
    _arr1: BigNumberish[],
    _arr2: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _difference(
    set1: string,
    set2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

  _getComponentById(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _getNeighbors(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput[]>;

  _getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

  _getPlayerId(
    _playerAddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getTileAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TileStructOutput>;

  _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

  _random(
    _max: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _samePos(
    _p1: PositionStruct,
    _p2: PositionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _strike(
    _strikeFactor: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _withinDist(
    _p1: PositionStruct,
    _p2: PositionStruct,
    _dist: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializePlayerECS(
      _position: PositionStruct,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveTroopECS(
      _troopId: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseTroopECS(
      _position: PositionStruct,
      _troopTemplateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

    getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TileStructOutput>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<WorldConstantsStructOutput>;

    addEntity(overrides?: CallOverrides): Promise<BigNumber>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerComponents(
      _gameAddr: string,
      _componentNameList: [string, string, string],
      overrides?: CallOverrides
    ): Promise<void>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

    _getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _getNeighbors(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput[]>;

    _getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    _getPlayerId(
      _playerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TileStructOutput>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ComponentValueSet(string,uint256,bytes)"(
      _componentName?: null,
      _entity?: null,
      _rawValue?: null
    ): ComponentValueSetEventFilter;
    ComponentValueSet(
      _componentName?: null,
      _entity?: null,
      _rawValue?: null
    ): ComponentValueSetEventFilter;

    "NewComponent(string,uint256)"(
      _name?: null,
      _id?: null
    ): NewComponentEventFilter;
    NewComponent(_name?: null, _id?: null): NewComponentEventFilter;

    "NewEntity(uint256)"(_entity?: null): NewEntityEventFilter;
    NewEntity(_entity?: null): NewEntityEventFilter;
  };

  estimateGas: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializePlayerECS(
      _position: PositionStruct,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveTroopECS(
      _troopId: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseTroopECS(
      _position: PositionStruct,
      _troopTemplateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getComponent(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldConstants(overrides?: CallOverrides): Promise<BigNumber>;

    addEntity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerComponents(
      _gameAddr: string,
      _componentNameList: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getComponent(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    _getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNeighbors(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    _getPlayerId(
      _playerAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializePlayerECS(
      _position: PositionStruct,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveTroopECS(
      _troopId: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseTroopECS(
      _position: PositionStruct,
      _troopTemplateId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getComponent(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMapChunk(
      _startPos: PositionStruct,
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorldConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addEntity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerComponents(
      _gameAddr: string,
      _componentNameList: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getComponent(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getComponentById(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getNeighbors(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPlayerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _getPlayerId(
      _playerAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inBound(
      _p: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
