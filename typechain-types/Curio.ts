/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FacetCutStruct = {
  facetAddress: string;
  action: BigNumberish;
  functionSelectors: BytesLike[];
};

export type FacetCutStructOutput = [string, number, string[]] & {
  facetAddress: string;
  action: number;
  functionSelectors: string[];
};

export type FacetStruct = {
  facetAddress: string;
  functionSelectors: BytesLike[];
};

export type FacetStructOutput = [string, string[]] & {
  facetAddress: string;
  functionSelectors: string[];
};

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type TileStruct = { isInitialized: boolean; terrain: BigNumberish };

export type TileStructOutput = [boolean, number] & {
  isInitialized: boolean;
  terrain: number;
};

export type WorldConstantsStruct = {
  admin: string;
  worldWidth: BigNumberish;
  worldHeight: BigNumberish;
  combatEfficiency: BigNumberish;
  numInitTerrainTypes: BigNumberish;
  initBatchSize: BigNumberish;
  initPlayerGoldBalance: BigNumberish;
  initPlayerOilBalance: BigNumberish;
  maxBaseCountPerPlayer: BigNumberish;
  maxTroopCountPerPlayer: BigNumberish;
  maxPlayerCount: BigNumberish;
  defaultBaseGoldGenerationPerSecond: BigNumberish;
  defaultWellOilGenerationPerSecond: BigNumberish;
  debuffFactor: BigNumberish;
};

export type WorldConstantsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  admin: string;
  worldWidth: BigNumber;
  worldHeight: BigNumber;
  combatEfficiency: BigNumber;
  numInitTerrainTypes: BigNumber;
  initBatchSize: BigNumber;
  initPlayerGoldBalance: BigNumber;
  initPlayerOilBalance: BigNumber;
  maxBaseCountPerPlayer: BigNumber;
  maxTroopCountPerPlayer: BigNumber;
  maxPlayerCount: BigNumber;
  defaultBaseGoldGenerationPerSecond: BigNumber;
  defaultWellOilGenerationPerSecond: BigNumber;
  debuffFactor: BigNumber;
};

export type ComponentSpecStruct = { name: string; valueType: BigNumberish };

export type ComponentSpecStructOutput = [string, number] & {
  name: string;
  valueType: number;
};

export interface CurioInterface extends utils.Interface {
  functions: {
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "deleteTroop(uint256)": FunctionFragment;
    "initializePlayer((uint256,uint256),string)": FunctionFragment;
    "march(uint256,(uint256,uint256))": FunctionFragment;
    "moveTroop(uint256,(uint256,uint256))": FunctionFragment;
    "purchaseTroop((uint256,uint256),uint256)": FunctionFragment;
    "getComponent(string)": FunctionFragment;
    "getComponentById(uint256)": FunctionFragment;
    "getPlayerCount()": FunctionFragment;
    "getPlayerId(address)": FunctionFragment;
    "getTileAt((uint256,uint256))": FunctionFragment;
    "getWorldConstants()": FunctionFragment;
    "isPlayerInitialized(address)": FunctionFragment;
    "addEntity()": FunctionFragment;
    "bulkInitializeTiles((uint256,uint256)[])": FunctionFragment;
    "pauseGame()": FunctionFragment;
    "reactivatePlayer(address)": FunctionFragment;
    "registerComponents(address,(string,uint8)[])": FunctionFragment;
    "registerDefaultComponents(address)": FunctionFragment;
    "resumeGame()": FunctionFragment;
    "setComponentValue(string,uint256,bytes)": FunctionFragment;
    "spawnTroop((uint256,uint256),address,uint256)": FunctionFragment;
    "storeEncodedColumnBatches(uint256[][])": FunctionFragment;
    "transferBaseOwnership((uint256,uint256),address)": FunctionFragment;
    "updatePlayerBalances(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "sampleBuffPolicy()": FunctionFragment;
    "sampleImpossiblePolicy()": FunctionFragment;
    "workersOfTheWorldUnite()": FunctionFragment;
    "_coincident((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "_concatenate(uint256[],uint256[])": FunctionFragment;
    "_difference(Set,Set)": FunctionFragment;
    "_getAddress(string,uint256)": FunctionFragment;
    "_getArmyAttackFactor(uint256[])": FunctionFragment;
    "_getArmyDamagePerHit(uint256[])": FunctionFragment;
    "_getArmyDefenseFactor(uint256[])": FunctionFragment;
    "_getArmyHealth(uint256[])": FunctionFragment;
    "_getArmyLargeActionCooldown(uint256[])": FunctionFragment;
    "_getArmyMovementCooldown(uint256[])": FunctionFragment;
    "_getArmyTroopEntities(uint256)": FunctionFragment;
    "_getBool(string,uint256)": FunctionFragment;
    "_getComponent(string)": FunctionFragment;
    "_getComponentByEntity(uint256)": FunctionFragment;
    "_getComponentValue(string,uint256)": FunctionFragment;
    "_getDebuffedArmyDamagePerHit(uint256[])": FunctionFragment;
    "_getInfantryPercentage(uint256[])": FunctionFragment;
    "_getInt(string,uint256)": FunctionFragment;
    "_getNeighbors((uint256,uint256))": FunctionFragment;
    "_getPlayerEntity(address)": FunctionFragment;
    "_getPosition(string,uint256)": FunctionFragment;
    "_getString(string,uint256)": FunctionFragment;
    "_getTileAt((uint256,uint256))": FunctionFragment;
    "_getUint(string,uint256)": FunctionFragment;
    "_inBound((uint256,uint256))": FunctionFragment;
    "_random(uint256,uint256)": FunctionFragment;
    "_strEq(string,string)": FunctionFragment;
    "_strike(uint256,uint256)": FunctionFragment;
    "_withinDistance((uint256,uint256),(uint256,uint256),uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTroop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [PositionStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "march",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "moveTroop",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTroop",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPlayerId", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInitialized",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addEntity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bulkInitializeTiles",
    values: [PositionStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "pauseGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reactivatePlayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerComponents",
    values: [string, ComponentSpecStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDefaultComponents",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resumeGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setComponentValue",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spawnTroop",
    values: [PositionStruct, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeEncodedColumnBatches",
    values: [BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferBaseOwnership",
    values: [PositionStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlayerBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sampleBuffPolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sampleImpossiblePolicy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "workersOfTheWorldUnite",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_coincident",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_concatenate",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_difference",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyAttackFactor",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyDamagePerHit",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyDefenseFactor",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyHealth",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyLargeActionCooldown",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyMovementCooldown",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getArmyTroopEntities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBool",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getComponent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getComponentByEntity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getComponentValue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getDebuffedArmyDamagePerHit",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getInfantryPercentage",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_getInt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getNeighbors",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getPlayerEntity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_getPosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getString",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getUint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_inBound",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_random",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_strEq",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "_strike",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_withinDistance",
    values: [PositionStruct, PositionStruct, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTroop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "march", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveTroop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTroop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTileAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorldConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEntity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkInitializeTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reactivatePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerDefaultComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resumeGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setComponentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spawnTroop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storeEncodedColumnBatches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferBaseOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlayerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sampleBuffPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sampleImpossiblePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workersOfTheWorldUnite",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_coincident",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_concatenate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_difference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyAttackFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyDamagePerHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyDefenseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyLargeActionCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyMovementCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getArmyTroopEntities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getBool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getComponentByEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getComponentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getDebuffedArmyDamagePerHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getInfantryPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getInt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getNeighbors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPlayerEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getString", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_getTileAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_getUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_inBound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_random", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_strEq", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_strike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_withinDistance",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ComponentValueSet(string,uint256,bytes)": EventFragment;
    "EntityRemoved(uint256)": EventFragment;
    "GamePaused()": EventFragment;
    "GameResumed()": EventFragment;
    "NewComponent(string,uint256)": EventFragment;
    "NewEntity(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComponentValueSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GamePaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewComponent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewEntity"): EventFragment;
}

export type DiamondCutEvent = TypedEvent<
  [FacetCutStructOutput[], string, string],
  { _diamondCut: FacetCutStructOutput[]; _init: string; _calldata: string }
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ComponentValueSetEvent = TypedEvent<
  [string, BigNumber, string],
  { _componentName: string; _entity: BigNumber; _value: string }
>;

export type ComponentValueSetEventFilter =
  TypedEventFilter<ComponentValueSetEvent>;

export type EntityRemovedEvent = TypedEvent<
  [BigNumber],
  { _entity: BigNumber }
>;

export type EntityRemovedEventFilter = TypedEventFilter<EntityRemovedEvent>;

export type GamePausedEvent = TypedEvent<[], {}>;

export type GamePausedEventFilter = TypedEventFilter<GamePausedEvent>;

export type GameResumedEvent = TypedEvent<[], {}>;

export type GameResumedEventFilter = TypedEventFilter<GameResumedEvent>;

export type NewComponentEvent = TypedEvent<
  [string, BigNumber],
  { _name: string; _entity: BigNumber }
>;

export type NewComponentEventFilter = TypedEventFilter<NewComponentEvent>;

export type NewEntityEvent = TypedEvent<[BigNumber], { _entity: BigNumber }>;

export type NewEntityEventFilter = TypedEventFilter<NewEntityEvent>;

export interface Curio extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurioInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    facetAddresses(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _facetFunctionSelectors: string[] }>;

    facets(
      overrides?: CallOverrides
    ): Promise<[FacetStructOutput[]] & { facets_: FacetStructOutput[] }>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deleteTroop(
      _troopEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _position: PositionStruct,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    march(
      _armyEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveTroop(
      _troopEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    purchaseTroop(
      _position: PositionStruct,
      _troopTemplateEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getComponent(_name: string, overrides?: CallOverrides): Promise<[string]>;

    getComponentById(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPlayerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlayerId(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput]>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<[WorldConstantsStructOutput]>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addEntity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reactivatePlayer(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerComponents(
      _gameAddr: string,
      _componentSpecs: ComponentSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerDefaultComponents(
      _gameAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resumeGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spawnTroop(
      _position: PositionStruct,
      _player: string,
      _troopTemplateEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferBaseOwnership(
      _position: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePlayerBalances(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sampleBuffPolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sampleImpossiblePolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    workersOfTheWorldUnite(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _coincident(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    _getAddress(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getArmyAttackFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyDefenseFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyHealth(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyLargeActionCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyMovementCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getArmyTroopEntities(
      _armyEntity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    _getBool(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _getComponent(_name: string, overrides?: CallOverrides): Promise<[string]>;

    _getComponentByEntity(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getDebuffedArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getInfantryPercentage(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getInt(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getNeighbors(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput[]]>;

    _getPlayerEntity(
      _player: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getPosition(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput]>;

    _getString(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput]>;

    _getUint(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<[boolean]>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _strEq(
      _s1: string,
      _s2: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _withinDistance(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  diamondCut(
    _diamondCut: FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  facetAddress(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  facetAddresses(overrides?: CallOverrides): Promise<string[]>;

  facetFunctionSelectors(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

  supportsInterface(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deleteTroop(
    _troopEntity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _position: PositionStruct,
    _name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  march(
    _armyEntity: BigNumberish,
    _targetPosition: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveTroop(
    _troopEntity: BigNumberish,
    _targetPosition: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  purchaseTroop(
    _position: PositionStruct,
    _troopTemplateEntity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

  getComponentById(
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

  getPlayerId(_player: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTileAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TileStructOutput>;

  getWorldConstants(
    overrides?: CallOverrides
  ): Promise<WorldConstantsStructOutput>;

  isPlayerInitialized(
    _player: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addEntity(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bulkInitializeTiles(
    _positions: PositionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reactivatePlayer(
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerComponents(
    _gameAddr: string,
    _componentSpecs: ComponentSpecStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerDefaultComponents(
    _gameAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resumeGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setComponentValue(
    _componentName: string,
    _entity: BigNumberish,
    _value: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spawnTroop(
    _position: PositionStruct,
    _player: string,
    _troopTemplateEntity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storeEncodedColumnBatches(
    _colBatches: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferBaseOwnership(
    _position: PositionStruct,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePlayerBalances(
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    _newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sampleBuffPolicy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sampleImpossiblePolicy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  workersOfTheWorldUnite(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _coincident(
    _p1: PositionStruct,
    _p2: PositionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _concatenate(
    _arr1: BigNumberish[],
    _arr2: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _difference(
    set1: string,
    set2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _getAddress(
    _componentName: string,
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _getArmyAttackFactor(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyDamagePerHit(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyDefenseFactor(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyHealth(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyLargeActionCooldown(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyMovementCooldown(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getArmyTroopEntities(
    _armyEntity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  _getBool(
    _componentName: string,
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

  _getComponentByEntity(
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _getComponentValue(
    _componentName: string,
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _getDebuffedArmyDamagePerHit(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getInfantryPercentage(
    _troopEntities: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getInt(
    _componentName: string,
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getNeighbors(
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput[]>;

  _getPlayerEntity(
    _player: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getPosition(
    _componentName: string,
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  _getString(
    _componentName: string,
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _getTileAt(
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TileStructOutput>;

  _getUint(
    _componentName: string,
    _entity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

  _random(
    _max: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _strEq(_s1: string, _s2: string, overrides?: CallOverrides): Promise<boolean>;

  _strike(
    _strikeFactor: BigNumberish,
    _salt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _withinDistance(
    _p1: PositionStruct,
    _p2: PositionStruct,
    _dist: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    facetAddresses(overrides?: CallOverrides): Promise<string[]>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    facets(overrides?: CallOverrides): Promise<FacetStructOutput[]>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteTroop(
      _troopEntity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initializePlayer(
      _position: PositionStruct,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    march(
      _armyEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    moveTroop(
      _troopEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    purchaseTroop(
      _position: PositionStruct,
      _troopTemplateEntity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

    getComponentById(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerId(_player: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TileStructOutput>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<WorldConstantsStructOutput>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addEntity(overrides?: CallOverrides): Promise<BigNumber>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    pauseGame(overrides?: CallOverrides): Promise<void>;

    reactivatePlayer(_player: string, overrides?: CallOverrides): Promise<void>;

    registerComponents(
      _gameAddr: string,
      _componentSpecs: ComponentSpecStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerDefaultComponents(
      _gameAddr: string,
      overrides?: CallOverrides
    ): Promise<ComponentSpecStructOutput[]>;

    resumeGame(overrides?: CallOverrides): Promise<void>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    spawnTroop(
      _position: PositionStruct,
      _player: string,
      _troopTemplateEntity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    transferBaseOwnership(
      _position: PositionStruct,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlayerBalances(
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sampleBuffPolicy(overrides?: CallOverrides): Promise<void>;

    sampleImpossiblePolicy(overrides?: CallOverrides): Promise<void>;

    workersOfTheWorldUnite(overrides?: CallOverrides): Promise<void>;

    _coincident(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _getAddress(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _getArmyAttackFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDefenseFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyHealth(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyLargeActionCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyMovementCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyTroopEntities(
      _armyEntity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    _getBool(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _getComponent(_name: string, overrides?: CallOverrides): Promise<string>;

    _getComponentByEntity(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _getComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _getDebuffedArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getInfantryPercentage(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getInt(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNeighbors(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput[]>;

    _getPlayerEntity(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPosition(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    _getString(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TileStructOutput>;

    _getUint(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _strEq(
      _s1: string,
      _s2: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _withinDistance(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      _diamondCut?: null,
      _init?: null,
      _calldata?: null
    ): DiamondCutEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ComponentValueSet(string,uint256,bytes)"(
      _componentName?: null,
      _entity?: null,
      _value?: null
    ): ComponentValueSetEventFilter;
    ComponentValueSet(
      _componentName?: null,
      _entity?: null,
      _value?: null
    ): ComponentValueSetEventFilter;

    "EntityRemoved(uint256)"(_entity?: null): EntityRemovedEventFilter;
    EntityRemoved(_entity?: null): EntityRemovedEventFilter;

    "GamePaused()"(): GamePausedEventFilter;
    GamePaused(): GamePausedEventFilter;

    "GameResumed()"(): GameResumedEventFilter;
    GameResumed(): GameResumedEventFilter;

    "NewComponent(string,uint256)"(
      _name?: null,
      _entity?: null
    ): NewComponentEventFilter;
    NewComponent(_name?: null, _entity?: null): NewComponentEventFilter;

    "NewEntity(uint256)"(_entity?: null): NewEntityEventFilter;
    NewEntity(_entity?: null): NewEntityEventFilter;
  };

  estimateGas: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facetAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    facets(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteTroop(
      _troopEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _position: PositionStruct,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    march(
      _armyEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveTroop(
      _troopEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    purchaseTroop(
      _position: PositionStruct,
      _troopTemplateEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getComponent(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    getComponentById(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerId(_player: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldConstants(overrides?: CallOverrides): Promise<BigNumber>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addEntity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reactivatePlayer(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerComponents(
      _gameAddr: string,
      _componentSpecs: ComponentSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerDefaultComponents(
      _gameAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resumeGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spawnTroop(
      _position: PositionStruct,
      _player: string,
      _troopTemplateEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferBaseOwnership(
      _position: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePlayerBalances(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sampleBuffPolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sampleImpossiblePolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    workersOfTheWorldUnite(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _coincident(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getAddress(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyAttackFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyDefenseFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyHealth(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyLargeActionCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyMovementCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getArmyTroopEntities(
      _armyEntity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBool(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getComponent(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    _getComponentByEntity(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDebuffedArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getInfantryPercentage(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getInt(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getNeighbors(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPlayerEntity(
      _player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getPosition(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getString(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getUint(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _strEq(
      _s1: string,
      _s2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _withinDistance(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      _diamondCut: FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    facetAddress(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facetAddresses(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    facetFunctionSelectors(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    facets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteTroop(
      _troopEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _position: PositionStruct,
      _name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    march(
      _armyEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveTroop(
      _troopEntity: BigNumberish,
      _targetPosition: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    purchaseTroop(
      _position: PositionStruct,
      _troopTemplateEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getComponent(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentById(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayerId(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorldConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPlayerInitialized(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addEntity(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bulkInitializeTiles(
      _positions: PositionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reactivatePlayer(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerComponents(
      _gameAddr: string,
      _componentSpecs: ComponentSpecStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerDefaultComponents(
      _gameAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resumeGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      _value: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spawnTroop(
      _position: PositionStruct,
      _player: string,
      _troopTemplateEntity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storeEncodedColumnBatches(
      _colBatches: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferBaseOwnership(
      _position: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePlayerBalances(
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sampleBuffPolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sampleImpossiblePolicy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    workersOfTheWorldUnite(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _coincident(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _concatenate(
      _arr1: BigNumberish[],
      _arr2: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _difference(
      set1: string,
      set2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getAddress(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyAttackFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyDefenseFactor(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyHealth(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyLargeActionCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyMovementCooldown(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getArmyTroopEntities(
      _armyEntity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBool(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getComponent(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getComponentByEntity(
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getComponentValue(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getDebuffedArmyDamagePerHit(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getInfantryPercentage(
      _troopEntities: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getInt(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getNeighbors(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPlayerEntity(
      _player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getPosition(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getString(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getUint(
      _componentName: string,
      _entity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inBound(
      _p: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _random(
      _max: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _strEq(
      _s1: string,
      _s2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _strike(
      _strikeFactor: BigNumberish,
      _salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _withinDistance(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
