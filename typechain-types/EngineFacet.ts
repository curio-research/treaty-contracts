/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type BlockDataStruct = {
  blockId: BigNumberish;
  health: BigNumberish;
  owner: string;
  lastAttacked: BigNumberish;
  lastMoved: BigNumberish;
  occupiable: boolean;
};

export type BlockDataStructOutput = [
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  blockId: BigNumber;
  health: BigNumber;
  owner: string;
  lastAttacked: BigNumber;
  lastMoved: BigNumber;
  occupiable: boolean;
};

export interface EngineFacetInterface extends utils.Interface {
  functions: {
    "attack((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "craft(uint256)": FunctionFragment;
    "initializePlayer((uint256,uint256),uint256)": FunctionFragment;
    "mine((uint256,uint256))": FunctionFragment;
    "move((uint256,uint256))": FunctionFragment;
    "moveBlock((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "place((uint256,uint256),uint256)": FunctionFragment;
    "updateEpoch()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attack",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(functionFragment: "craft", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mine",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "moveBlock",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "craft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moveBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;

  events: {
    "EventAttackItemEvent(address,tuple,tuple,uint256,uint256,uint256)": EventFragment;
    "EventChangeBlockStrength(address,tuple,uint256,uint256)": EventFragment;
    "EventCraft(address,uint256)": EventFragment;
    "EventEpochUpdate(address,uint256,uint256)": EventFragment;
    "EventMineItem(address,tuple,uint256)": EventFragment;
    "EventMove(address,tuple)": EventFragment;
    "EventMoveBlock(address,tuple,tuple,uint256,uint256)": EventFragment;
    "EventNewPlayer(address,tuple)": EventFragment;
    "EventPlace(address,tuple,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventAttackItemEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventChangeBlockStrength"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventCraft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventEpochUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMineItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventMoveBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventNewPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventPlace"): EventFragment;
}

export type EventAttackItemEventEvent = TypedEvent<
  [
    string,
    PositionStructOutput,
    PositionStructOutput,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    _player: string;
    _origin: PositionStructOutput;
    _target: PositionStructOutput;
    _attackerWorldBlockId: BigNumber;
    _targetWorldBlockId: BigNumber;
    _strength: BigNumber;
  }
>;

export type EventAttackItemEventEventFilter =
  TypedEventFilter<EventAttackItemEventEvent>;

export type EventChangeBlockStrengthEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber, BigNumber],
  {
    _player: string;
    _pos: PositionStructOutput;
    _health: BigNumber;
    _resourceUsed: BigNumber;
  }
>;

export type EventChangeBlockStrengthEventFilter =
  TypedEventFilter<EventChangeBlockStrengthEvent>;

export type EventCraftEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _blockId: BigNumber }
>;

export type EventCraftEventFilter = TypedEventFilter<EventCraftEvent>;

export type EventEpochUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _epoch: BigNumber; _time: BigNumber }
>;

export type EventEpochUpdateEventFilter =
  TypedEventFilter<EventEpochUpdateEvent>;

export type EventMineItemEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber],
  { _player: string; _pos: PositionStructOutput; _itemId: BigNumber }
>;

export type EventMineItemEventFilter = TypedEventFilter<EventMineItemEvent>;

export type EventMoveEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _pos: PositionStructOutput }
>;

export type EventMoveEventFilter = TypedEventFilter<EventMoveEvent>;

export type EventMoveBlockEvent = TypedEvent<
  [string, PositionStructOutput, PositionStructOutput, BigNumber, BigNumber],
  {
    _player: string;
    _startPos: PositionStructOutput;
    _endPos: PositionStructOutput;
    _worldBlockId: BigNumber;
    _time: BigNumber;
  }
>;

export type EventMoveBlockEventFilter = TypedEventFilter<EventMoveBlockEvent>;

export type EventNewPlayerEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _pos: PositionStructOutput }
>;

export type EventNewPlayerEventFilter = TypedEventFilter<EventNewPlayerEvent>;

export type EventPlaceEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber, BlockDataStructOutput],
  {
    _player: string;
    _pos: PositionStructOutput;
    _worldBlockId: BigNumber;
    _blockData: BlockDataStructOutput;
  }
>;

export type EventPlaceEventFilter = TypedEventFilter<EventPlaceEvent>;

export interface EngineFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EngineFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    craft(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mine(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    move(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  attack(
    _origin: PositionStruct,
    _target: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  craft(
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _pos: PositionStruct,
    _defaultCurrencyIdx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mine(
    _pos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  move(
    _pos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveBlock(
    _startPos: PositionStruct,
    _targetPos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  place(
    _pos: PositionStruct,
    _blockId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    craft(_itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mine(_pos: PositionStruct, overrides?: CallOverrides): Promise<void>;

    move(_pos: PositionStruct, overrides?: CallOverrides): Promise<void>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEpoch(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EventAttackItemEvent(address,tuple,tuple,uint256,uint256,uint256)"(
      _player?: null,
      _origin?: null,
      _target?: null,
      _attackerWorldBlockId?: null,
      _targetWorldBlockId?: null,
      _strength?: null
    ): EventAttackItemEventEventFilter;
    EventAttackItemEvent(
      _player?: null,
      _origin?: null,
      _target?: null,
      _attackerWorldBlockId?: null,
      _targetWorldBlockId?: null,
      _strength?: null
    ): EventAttackItemEventEventFilter;

    "EventChangeBlockStrength(address,tuple,uint256,uint256)"(
      _player?: null,
      _pos?: null,
      _health?: null,
      _resourceUsed?: null
    ): EventChangeBlockStrengthEventFilter;
    EventChangeBlockStrength(
      _player?: null,
      _pos?: null,
      _health?: null,
      _resourceUsed?: null
    ): EventChangeBlockStrengthEventFilter;

    "EventCraft(address,uint256)"(
      _player?: null,
      _blockId?: null
    ): EventCraftEventFilter;
    EventCraft(_player?: null, _blockId?: null): EventCraftEventFilter;

    "EventEpochUpdate(address,uint256,uint256)"(
      _player?: null,
      _epoch?: null,
      _time?: null
    ): EventEpochUpdateEventFilter;
    EventEpochUpdate(
      _player?: null,
      _epoch?: null,
      _time?: null
    ): EventEpochUpdateEventFilter;

    "EventMineItem(address,tuple,uint256)"(
      _player?: null,
      _pos?: null,
      _itemId?: null
    ): EventMineItemEventFilter;
    EventMineItem(
      _player?: null,
      _pos?: null,
      _itemId?: null
    ): EventMineItemEventFilter;

    "EventMove(address,tuple)"(
      _player?: null,
      _pos?: null
    ): EventMoveEventFilter;
    EventMove(_player?: null, _pos?: null): EventMoveEventFilter;

    "EventMoveBlock(address,tuple,tuple,uint256,uint256)"(
      _player?: null,
      _startPos?: null,
      _endPos?: null,
      _worldBlockId?: null,
      _time?: null
    ): EventMoveBlockEventFilter;
    EventMoveBlock(
      _player?: null,
      _startPos?: null,
      _endPos?: null,
      _worldBlockId?: null,
      _time?: null
    ): EventMoveBlockEventFilter;

    "EventNewPlayer(address,tuple)"(
      _player?: null,
      _pos?: null
    ): EventNewPlayerEventFilter;
    EventNewPlayer(_player?: null, _pos?: null): EventNewPlayerEventFilter;

    "EventPlace(address,tuple,uint256,tuple)"(
      _player?: null,
      _pos?: null,
      _worldBlockId?: null,
      _blockData?: null
    ): EventPlaceEventFilter;
    EventPlace(
      _player?: null,
      _pos?: null,
      _worldBlockId?: null,
      _blockData?: null
    ): EventPlaceEventFilter;
  };

  estimateGas: {
    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    craft(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mine(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    move(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attack(
      _origin: PositionStruct,
      _target: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    craft(
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      _defaultCurrencyIdx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mine(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    move(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveBlock(
      _startPos: PositionStruct,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    place(
      _pos: PositionStruct,
      _blockId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
