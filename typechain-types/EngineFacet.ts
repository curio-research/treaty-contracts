/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export interface EngineFacetInterface extends utils.Interface {
  functions: {
    "battle(uint256,(uint256,uint256))": FunctionFragment;
    "captureBase(uint256,(uint256,uint256))": FunctionFragment;
    "endProduction((uint256,uint256))": FunctionFragment;
    "initializePlayer((uint256,uint256),address)": FunctionFragment;
    "initializeTroop((uint256,uint256),address)": FunctionFragment;
    "move(uint256,(uint256,uint256))": FunctionFragment;
    "repair((uint256,uint256))": FunctionFragment;
    "setMapChunk((uint256,uint256),uint256[][])": FunctionFragment;
    "startProduction((uint256,uint256),uint256)": FunctionFragment;
    "updateEpoch()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "battle",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "captureBase",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "endProduction",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePlayer",
    values: [PositionStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeTroop",
    values: [PositionStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BigNumberish, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "repair",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setMapChunk",
    values: [PositionStruct, BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "startProduction",
    values: [PositionStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "battle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "captureBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endProduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeTroop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMapChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startProduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;

  events: {
    "Attacked(address,uint256,address,uint256)": EventFragment;
    "BaseCaptured(address,uint256,uint256)": EventFragment;
    "Death(address,uint256)": EventFragment;
    "EpochUpdate(uint256,uint256)": EventFragment;
    "Moved(address,uint256,tuple)": EventFragment;
    "NewPlayer(address,tuple)": EventFragment;
    "Produced(address,uint256,tuple)": EventFragment;
    "ProductionStarted(address,uint256,uint256)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "Repaired(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attacked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseCaptured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Death"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Moved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Produced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductionStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaired"): EventFragment;
}

export type AttackedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  {
    _player: string;
    _troopId: BigNumber;
    _targetPlayer: string;
    _targetId: BigNumber;
  }
>;

export type AttackedEventFilter = TypedEventFilter<AttackedEvent>;

export type BaseCapturedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _troopId: BigNumber; _baseId: BigNumber }
>;

export type BaseCapturedEventFilter = TypedEventFilter<BaseCapturedEvent>;

export type DeathEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _troopId: BigNumber }
>;

export type DeathEventFilter = TypedEventFilter<DeathEvent>;

export type EpochUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _epoch: BigNumber; _time: BigNumber }
>;

export type EpochUpdateEventFilter = TypedEventFilter<EpochUpdateEvent>;

export type MovedEvent = TypedEvent<
  [string, BigNumber, PositionStructOutput],
  { _player: string; _troopId: BigNumber; _pos: PositionStructOutput }
>;

export type MovedEventFilter = TypedEventFilter<MovedEvent>;

export type NewPlayerEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _pos: PositionStructOutput }
>;

export type NewPlayerEventFilter = TypedEventFilter<NewPlayerEvent>;

export type ProducedEvent = TypedEvent<
  [string, BigNumber, PositionStructOutput],
  { _player: string; _troopId: BigNumber; _pos: PositionStructOutput }
>;

export type ProducedEventFilter = TypedEventFilter<ProducedEvent>;

export type ProductionStartedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _baseId: BigNumber; _troopTypeId: BigNumber }
>;

export type ProductionStartedEventFilter =
  TypedEventFilter<ProductionStartedEvent>;

export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _troopId: BigNumber }
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export type RepairedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _troopId: BigNumber; _health: BigNumber }
>;

export type RepairedEventFilter = TypedEventFilter<RepairedEvent>;

export interface EngineFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EngineFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    battle(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    captureBase(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endProduction(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeTroop(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    move(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repair(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMapChunk(
      _pos: PositionStruct,
      _chunk: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startProduction(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  battle(
    _troopId: BigNumberish,
    _targetPos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  captureBase(
    _troopId: BigNumberish,
    _targetPos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endProduction(
    _pos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializePlayer(
    _pos: PositionStruct,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeTroop(
    _pos: PositionStruct,
    _player: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  move(
    _troopId: BigNumberish,
    _targetPos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repair(
    _pos: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMapChunk(
    _pos: PositionStruct,
    _chunk: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startProduction(
    _pos: PositionStruct,
    _troopTypeId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    battle(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    captureBase(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    endProduction(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    initializePlayer(
      _pos: PositionStruct,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeTroop(
      _pos: PositionStruct,
      _player: string,
      overrides?: CallOverrides
    ): Promise<void>;

    move(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    repair(_pos: PositionStruct, overrides?: CallOverrides): Promise<void>;

    setMapChunk(
      _pos: PositionStruct,
      _chunk: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    startProduction(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEpoch(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Attacked(address,uint256,address,uint256)"(
      _player?: null,
      _troopId?: null,
      _targetPlayer?: null,
      _targetId?: null
    ): AttackedEventFilter;
    Attacked(
      _player?: null,
      _troopId?: null,
      _targetPlayer?: null,
      _targetId?: null
    ): AttackedEventFilter;

    "BaseCaptured(address,uint256,uint256)"(
      _player?: null,
      _troopId?: null,
      _baseId?: null
    ): BaseCapturedEventFilter;
    BaseCaptured(
      _player?: null,
      _troopId?: null,
      _baseId?: null
    ): BaseCapturedEventFilter;

    "Death(address,uint256)"(_player?: null, _troopId?: null): DeathEventFilter;
    Death(_player?: null, _troopId?: null): DeathEventFilter;

    "EpochUpdate(uint256,uint256)"(
      _epoch?: null,
      _time?: null
    ): EpochUpdateEventFilter;
    EpochUpdate(_epoch?: null, _time?: null): EpochUpdateEventFilter;

    "Moved(address,uint256,tuple)"(
      _player?: null,
      _troopId?: null,
      _pos?: null
    ): MovedEventFilter;
    Moved(_player?: null, _troopId?: null, _pos?: null): MovedEventFilter;

    "NewPlayer(address,tuple)"(
      _player?: null,
      _pos?: null
    ): NewPlayerEventFilter;
    NewPlayer(_player?: null, _pos?: null): NewPlayerEventFilter;

    "Produced(address,uint256,tuple)"(
      _player?: null,
      _troopId?: null,
      _pos?: null
    ): ProducedEventFilter;
    Produced(_player?: null, _troopId?: null, _pos?: null): ProducedEventFilter;

    "ProductionStarted(address,uint256,uint256)"(
      _player?: null,
      _baseId?: null,
      _troopTypeId?: null
    ): ProductionStartedEventFilter;
    ProductionStarted(
      _player?: null,
      _baseId?: null,
      _troopTypeId?: null
    ): ProductionStartedEventFilter;

    "Recovered(address,uint256)"(
      _player?: null,
      _troopId?: null
    ): RecoveredEventFilter;
    Recovered(_player?: null, _troopId?: null): RecoveredEventFilter;

    "Repaired(address,uint256,uint256)"(
      _player?: null,
      _troopId?: null,
      _health?: null
    ): RepairedEventFilter;
    Repaired(
      _player?: null,
      _troopId?: null,
      _health?: null
    ): RepairedEventFilter;
  };

  estimateGas: {
    battle(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    captureBase(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endProduction(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializePlayer(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeTroop(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    move(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repair(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMapChunk(
      _pos: PositionStruct,
      _chunk: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startProduction(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    battle(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    captureBase(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endProduction(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializePlayer(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeTroop(
      _pos: PositionStruct,
      _player: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    move(
      _troopId: BigNumberish,
      _targetPos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repair(
      _pos: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMapChunk(
      _pos: PositionStruct,
      _chunk: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startProduction(
      _pos: PositionStruct,
      _troopTypeId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
