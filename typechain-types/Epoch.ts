/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface EpochInterface extends utils.Interface {
  functions: {
    "epoch()": FunctionFragment;
    "interval()": FunctionFragment;
    "lastUpdated()": FunctionFragment;
    "updateEpoch()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateEpoch",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEpoch",
    data: BytesLike
  ): Result;

  events: {
    "EpochUpdate(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EpochUpdate"): EventFragment;
}

export type EpochUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _epoch: BigNumber; _time: BigNumber }
>;

export type EpochUpdateEventFilter = TypedEventFilter<EpochUpdateEvent>;

export interface Epoch extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EpochInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    interval(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdated(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  epoch(overrides?: CallOverrides): Promise<BigNumber>;

  interval(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

  updateEpoch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    updateEpoch(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EpochUpdate(address,uint256,uint256)"(
      _player?: null,
      _epoch?: null,
      _time?: null
    ): EpochUpdateEventFilter;
    EpochUpdate(
      _player?: null,
      _epoch?: null,
      _time?: null
    ): EpochUpdateEventFilter;
  };

  estimateGas: {
    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    interval(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateEpoch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
