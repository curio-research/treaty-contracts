/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type TileStruct = {
  terrain: BigNumberish;
  occupantId: BigNumberish;
  baseId: BigNumberish;
};

export type TileStructOutput = [number, BigNumber, BigNumber] & {
  terrain: number;
  occupantId: BigNumber;
  baseId: BigNumber;
};

export type TroopStruct = {
  owner: string;
  troopTypeId: BigNumberish;
  lastMoved: BigNumberish;
  movesLeftInEpoch: BigNumberish;
  lastAttacked: BigNumberish;
  lastRepaired: BigNumberish;
  health: BigNumberish;
  pos: PositionStruct;
  cargoTroopIds: BigNumberish[];
};

export type TroopStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  PositionStructOutput,
  BigNumber[]
] & {
  owner: string;
  troopTypeId: BigNumber;
  lastMoved: BigNumber;
  movesLeftInEpoch: BigNumber;
  lastAttacked: BigNumber;
  lastRepaired: BigNumber;
  health: BigNumber;
  pos: PositionStructOutput;
  cargoTroopIds: BigNumber[];
};

export type WorldConstantsStruct = {
  admin: string;
  worldWidth: BigNumberish;
  worldHeight: BigNumberish;
  numPorts: BigNumberish;
  numCities: BigNumberish;
  mapInterval: BigNumberish;
  secondsPerTurn: BigNumberish;
};

export type WorldConstantsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  admin: string;
  worldWidth: BigNumber;
  worldHeight: BigNumber;
  numPorts: BigNumber;
  numCities: BigNumber;
  mapInterval: BigNumber;
  secondsPerTurn: BigNumber;
};

export interface GetterFacetInterface extends utils.Interface {
  functions: {
    "_getMapChunk((uint256,uint256))": FunctionFragment;
    "_getTroopAt((uint256,uint256))": FunctionFragment;
    "_getWorldConstants()": FunctionFragment;
    "bulkGetAllTroops()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getMapChunk",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTroopAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getWorldConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkGetAllTroops",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_getMapChunk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getTroopAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getWorldConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkGetAllTroops",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GetterFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GetterFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getMapChunk(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    _getTroopAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TroopStructOutput]>;

    _getWorldConstants(
      overrides?: CallOverrides
    ): Promise<[WorldConstantsStructOutput]>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<[TroopStructOutput[]]>;
  };

  _getMapChunk(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

  _getTroopAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TroopStructOutput>;

  _getWorldConstants(
    overrides?: CallOverrides
  ): Promise<WorldConstantsStructOutput>;

  bulkGetAllTroops(overrides?: CallOverrides): Promise<TroopStructOutput[]>;

  callStatic: {
    _getMapChunk(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput[], PositionStructOutput[]]>;

    _getTroopAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TroopStructOutput>;

    _getWorldConstants(
      overrides?: CallOverrides
    ): Promise<WorldConstantsStructOutput>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<TroopStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    _getMapChunk(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTroopAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getWorldConstants(overrides?: CallOverrides): Promise<BigNumber>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _getMapChunk(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTroopAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getWorldConstants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkGetAllTroops(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
