/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MapSetInterface extends utils.Interface {
  functions: {
    "add(uint256,uint256)": FunctionFragment;
    "getItems(uint256)": FunctionFragment;
    "has(uint256,uint256)": FunctionFragment;
    "remove(uint256,uint256)": FunctionFragment;
    "size(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "has",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "size", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getItems", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "has", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "size", data: BytesLike): Result;

  events: {};
}

export interface MapSet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MapSetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getItems(
      setKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    has(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    remove(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    size(setKey: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  add(
    setKey: BigNumberish,
    item: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getItems(
    setKey: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  has(
    setKey: BigNumberish,
    item: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  remove(
    setKey: BigNumberish,
    item: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  size(setKey: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    add(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getItems(
      setKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    has(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    remove(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    size(setKey: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    add(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getItems(
      setKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    has(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remove(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    size(setKey: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getItems(
      setKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    has(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      setKey: BigNumberish,
      item: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    size(
      setKey: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
