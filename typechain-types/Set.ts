/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SetInterface extends utils.Interface {
  functions: {
    "add(uint256)": FunctionFragment;
    "includes(uint256)": FunctionFragment;
    "itemMapping(uint256)": FunctionFragment;
    "items(uint256)": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "size()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "add", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "includes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "items", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "size", values?: undefined): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "includes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "itemMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "items", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "size", data: BytesLike): Result;

  events: {};
}

export interface Set extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    add(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    includes(
      _item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    itemMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    remove(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    size(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  add(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  includes(_item: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  itemMapping(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  remove(
    _val: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  size(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    add(_val: BigNumberish, overrides?: CallOverrides): Promise<void>;

    includes(_item: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    itemMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    remove(_val: BigNumberish, overrides?: CallOverrides): Promise<void>;

    size(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    add(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    includes(
      _item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    items(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    size(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    includes(
      _item: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    items(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      _val: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    size(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
