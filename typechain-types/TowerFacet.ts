/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type TowerStruct = {
  rewardPerEpoch: BigNumberish;
  itemId: BigNumberish;
  lastCapturedEpoch: BigNumberish;
  owner: string;
};

export type TowerStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
  rewardPerEpoch: BigNumber;
  itemId: BigNumber;
  lastCapturedEpoch: BigNumber;
  owner: string;
};

export interface TowerFacetInterface extends utils.Interface {
  functions: {
    "addTower((uint256,uint256),(uint256,uint256,uint256,address))": FunctionFragment;
    "addTowerBulk((uint256,uint256)[],(uint256,uint256,uint256,address)[])": FunctionFragment;
    "capture((uint256,uint256))": FunctionFragment;
    "claimReward((uint256,uint256))": FunctionFragment;
    "getTowerById((uint256,uint256))": FunctionFragment;
    "isValidCapture(address,(uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTower",
    values: [PositionStruct, TowerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addTowerBulk",
    values: [PositionStruct[], TowerStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "capture",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTowerById",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidCapture",
    values: [string, PositionStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addTower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTowerBulk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "capture", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTowerById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidCapture",
    data: BytesLike
  ): Result;

  events: {
    "Capture(address,tuple)": EventFragment;
    "ClaimReward(address,tuple,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Capture"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
}

export type CaptureEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _position: PositionStructOutput }
>;

export type CaptureEventFilter = TypedEventFilter<CaptureEvent>;

export type ClaimRewardEvent = TypedEvent<
  [string, PositionStructOutput, BigNumber, BigNumber, BigNumber],
  {
    _player: string;
    _position: PositionStructOutput;
    _itemId: BigNumber;
    _itemAmount: BigNumber;
    _epoch: BigNumber;
  }
>;

export type ClaimRewardEventFilter = TypedEventFilter<ClaimRewardEvent>;

export interface TowerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TowerFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    capture(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TowerStructOutput]>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addTower(
    _position: PositionStruct,
    _tower: TowerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTowerBulk(
    _positions: PositionStruct[],
    _towers: TowerStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  capture(
    _position: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _position: PositionStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTowerById(
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TowerStructOutput>;

  isValidCapture(
    _player: string,
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    capture(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TowerStructOutput>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Capture(address,tuple)"(
      _player?: null,
      _position?: null
    ): CaptureEventFilter;
    Capture(_player?: null, _position?: null): CaptureEventFilter;

    "ClaimReward(address,tuple,uint256,uint256,uint256)"(
      _player?: null,
      _position?: null,
      _itemId?: null,
      _itemAmount?: null,
      _epoch?: null
    ): ClaimRewardEventFilter;
    ClaimReward(
      _player?: null,
      _position?: null,
      _itemId?: null,
      _itemAmount?: null,
      _epoch?: null
    ): ClaimRewardEventFilter;
  };

  estimateGas: {
    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    capture(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTower(
      _position: PositionStruct,
      _tower: TowerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTowerBulk(
      _positions: PositionStruct[],
      _towers: TowerStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    capture(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _position: PositionStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTowerById(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidCapture(
      _player: string,
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
