/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PositionStruct = { x: BigNumberish; y: BigNumberish };

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type TroopStruct = {
  owner: string;
  troopTypeId: BigNumberish;
  lastMoved: BigNumberish;
  movesLeftInEpoch: BigNumberish;
  lastAttacked: BigNumberish;
  lastRepaired: BigNumberish;
  health: BigNumberish;
  pos: PositionStruct;
  cargoTroopIds: BigNumberish[];
};

export type TroopStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  PositionStructOutput,
  BigNumber[]
] & {
  owner: string;
  troopTypeId: BigNumber;
  lastMoved: BigNumber;
  movesLeftInEpoch: BigNumber;
  lastAttacked: BigNumber;
  lastRepaired: BigNumber;
  health: BigNumber;
  pos: PositionStructOutput;
  cargoTroopIds: BigNumber[];
};

export type BaseStruct = {
  name: BigNumberish;
  owner: string;
  attackFactor: BigNumberish;
  defenseFactor: BigNumberish;
  health: BigNumberish;
};

export type BaseStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  name: number;
  owner: string;
  attackFactor: BigNumber;
  defenseFactor: BigNumber;
  health: BigNumber;
};

export type ProductionStruct = {
  troopTypeId: BigNumberish;
  startEpoch: BigNumberish;
};

export type ProductionStructOutput = [BigNumber, BigNumber] & {
  troopTypeId: BigNumber;
  startEpoch: BigNumber;
};

export type TileStruct = {
  terrain: BigNumberish;
  occupantId: BigNumberish;
  baseId: BigNumberish;
};

export type TileStructOutput = [number, BigNumber, BigNumber] & {
  terrain: number;
  occupantId: BigNumber;
  baseId: BigNumber;
};

export interface UtilInterface extends utils.Interface {
  functions: {
    "_getAttackCooldown(uint256)": FunctionFragment;
    "_getAttackFactor(uint256)": FunctionFragment;
    "_getBase(uint256)": FunctionFragment;
    "_getBaseHealth(uint256)": FunctionFragment;
    "_getBaseOwner(uint256)": FunctionFragment;
    "_getCargoCapacity(uint256)": FunctionFragment;
    "_getDamagePerHit(uint256)": FunctionFragment;
    "_getDefenseFactor(uint256)": FunctionFragment;
    "_getEpochsToProduce(uint256)": FunctionFragment;
    "_getMaxHealth(uint256)": FunctionFragment;
    "_getMovementCooldown(uint256)": FunctionFragment;
    "_getMovesPerEpoch(uint256)": FunctionFragment;
    "_getTileAt((uint256,uint256))": FunctionFragment;
    "_getTroop(uint256)": FunctionFragment;
    "_hasPort((uint8,uint256,uint256))": FunctionFragment;
    "_hasTroopTransport((uint8,uint256,uint256))": FunctionFragment;
    "_inBound((uint256,uint256))": FunctionFragment;
    "_isLandTroop(uint256)": FunctionFragment;
    "_random(uint256)": FunctionFragment;
    "_samePos((uint256,uint256),(uint256,uint256))": FunctionFragment;
    "_strike(uint256)": FunctionFragment;
    "_withinDist((uint256,uint256),(uint256,uint256),uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_getAttackCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAttackFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBaseHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getBaseOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getCargoCapacity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getDamagePerHit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getDefenseFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getEpochsToProduce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMaxHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMovementCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getMovesPerEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTroop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_hasPort",
    values: [TileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_hasTroopTransport",
    values: [TileStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_inBound",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_isLandTroop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_random",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_samePos",
    values: [PositionStruct, PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "_strike",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_withinDist",
    values: [PositionStruct, PositionStruct, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getAttackCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAttackFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getBaseHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getBaseOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getCargoCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getDamagePerHit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getDefenseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getEpochsToProduce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMaxHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMovementCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getMovesPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_getTileAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_getTroop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_hasPort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hasTroopTransport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_inBound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_isLandTroop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_random", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_samePos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_strike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_withinDist",
    data: BytesLike
  ): Result;

  events: {
    "AttackedBase(address,uint256,tuple,uint256,tuple)": EventFragment;
    "AttackedTroop(address,uint256,tuple,uint256,tuple)": EventFragment;
    "BaseCaptured(address,uint256,uint256)": EventFragment;
    "Death(address,uint256)": EventFragment;
    "EpochUpdate(uint256,uint256)": EventFragment;
    "Moved(address,uint256,tuple)": EventFragment;
    "NewPlayer(address,tuple)": EventFragment;
    "NewTroop(address,uint256,tuple,tuple)": EventFragment;
    "ProductionStarted(address,uint256,tuple)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "Repaired(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttackedBase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttackedTroop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseCaptured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Death"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EpochUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Moved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTroop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductionStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repaired"): EventFragment;
}

export type AttackedBaseEvent = TypedEvent<
  [string, BigNumber, TroopStructOutput, BigNumber, BaseStructOutput],
  {
    _player: string;
    _troopId: BigNumber;
    _troopInfo: TroopStructOutput;
    _targetBaseId: BigNumber;
    _targetBaseInfo: BaseStructOutput;
  }
>;

export type AttackedBaseEventFilter = TypedEventFilter<AttackedBaseEvent>;

export type AttackedTroopEvent = TypedEvent<
  [string, BigNumber, TroopStructOutput, BigNumber, TroopStructOutput],
  {
    _player: string;
    _troopId: BigNumber;
    _troopInfo: TroopStructOutput;
    _targetTroopId: BigNumber;
    _targetTroopInfo: TroopStructOutput;
  }
>;

export type AttackedTroopEventFilter = TypedEventFilter<AttackedTroopEvent>;

export type BaseCapturedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _troopId: BigNumber; _baseId: BigNumber }
>;

export type BaseCapturedEventFilter = TypedEventFilter<BaseCapturedEvent>;

export type DeathEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _troopId: BigNumber }
>;

export type DeathEventFilter = TypedEventFilter<DeathEvent>;

export type EpochUpdateEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _epoch: BigNumber; _time: BigNumber }
>;

export type EpochUpdateEventFilter = TypedEventFilter<EpochUpdateEvent>;

export type MovedEvent = TypedEvent<
  [string, BigNumber, PositionStructOutput],
  { _player: string; _troopId: BigNumber; _pos: PositionStructOutput }
>;

export type MovedEventFilter = TypedEventFilter<MovedEvent>;

export type NewPlayerEvent = TypedEvent<
  [string, PositionStructOutput],
  { _player: string; _pos: PositionStructOutput }
>;

export type NewPlayerEventFilter = TypedEventFilter<NewPlayerEvent>;

export type NewTroopEvent = TypedEvent<
  [string, BigNumber, TroopStructOutput, PositionStructOutput],
  {
    _player: string;
    _troopId: BigNumber;
    _troop: TroopStructOutput;
    _pos: PositionStructOutput;
  }
>;

export type NewTroopEventFilter = TypedEventFilter<NewTroopEvent>;

export type ProductionStartedEvent = TypedEvent<
  [string, BigNumber, ProductionStructOutput],
  { _player: string; _baseId: BigNumber; _production: ProductionStructOutput }
>;

export type ProductionStartedEventFilter =
  TypedEventFilter<ProductionStartedEvent>;

export type RecoveredEvent = TypedEvent<
  [string, BigNumber],
  { _player: string; _troopId: BigNumber }
>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export type RepairedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { _player: string; _troopId: BigNumber; _health: BigNumber }
>;

export type RepairedEventFilter = TypedEventFilter<RepairedEvent>;

export interface Util extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UtilInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getAttackCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BaseStructOutput]>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _getCargoCapacity(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getEpochsToProduce(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getMovesPerEpoch(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[TileStructOutput]>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TroopStructOutput]>;

    _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<[boolean]>;

    _hasTroopTransport(
      _tile: TileStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<[boolean]>;

    _isLandTroop(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _random(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _strike(
      _strikeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _getAttackCooldown(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getAttackFactor(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getBase(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BaseStructOutput>;

  _getBaseHealth(
    _baseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getBaseOwner(
    _baseId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  _getCargoCapacity(
    _troopId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getDamagePerHit(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getDefenseFactor(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getEpochsToProduce(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getMaxHealth(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getMovementCooldown(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getMovesPerEpoch(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getTileAt(
    _pos: PositionStruct,
    overrides?: CallOverrides
  ): Promise<TileStructOutput>;

  _getTroop(
    _troopId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TroopStructOutput>;

  _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<boolean>;

  _hasTroopTransport(
    _tile: TileStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

  _isLandTroop(
    _troopTypeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _random(_max: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  _samePos(
    _p1: PositionStruct,
    _p2: PositionStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _strike(
    _strikeFactor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  _withinDist(
    _p1: PositionStruct,
    _p2: PositionStruct,
    _dist: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _getAttackCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BaseStructOutput>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    _getCargoCapacity(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getEpochsToProduce(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMovesPerEpoch(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<TileStructOutput>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TroopStructOutput>;

    _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<boolean>;

    _hasTroopTransport(
      _tile: TileStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

    _isLandTroop(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _random(_max: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _strike(
      _strikeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AttackedBase(address,uint256,tuple,uint256,tuple)"(
      _player?: null,
      _troopId?: null,
      _troopInfo?: null,
      _targetBaseId?: null,
      _targetBaseInfo?: null
    ): AttackedBaseEventFilter;
    AttackedBase(
      _player?: null,
      _troopId?: null,
      _troopInfo?: null,
      _targetBaseId?: null,
      _targetBaseInfo?: null
    ): AttackedBaseEventFilter;

    "AttackedTroop(address,uint256,tuple,uint256,tuple)"(
      _player?: null,
      _troopId?: null,
      _troopInfo?: null,
      _targetTroopId?: null,
      _targetTroopInfo?: null
    ): AttackedTroopEventFilter;
    AttackedTroop(
      _player?: null,
      _troopId?: null,
      _troopInfo?: null,
      _targetTroopId?: null,
      _targetTroopInfo?: null
    ): AttackedTroopEventFilter;

    "BaseCaptured(address,uint256,uint256)"(
      _player?: null,
      _troopId?: null,
      _baseId?: null
    ): BaseCapturedEventFilter;
    BaseCaptured(
      _player?: null,
      _troopId?: null,
      _baseId?: null
    ): BaseCapturedEventFilter;

    "Death(address,uint256)"(_player?: null, _troopId?: null): DeathEventFilter;
    Death(_player?: null, _troopId?: null): DeathEventFilter;

    "EpochUpdate(uint256,uint256)"(
      _epoch?: null,
      _time?: null
    ): EpochUpdateEventFilter;
    EpochUpdate(_epoch?: null, _time?: null): EpochUpdateEventFilter;

    "Moved(address,uint256,tuple)"(
      _player?: null,
      _troopId?: null,
      _pos?: null
    ): MovedEventFilter;
    Moved(_player?: null, _troopId?: null, _pos?: null): MovedEventFilter;

    "NewPlayer(address,tuple)"(
      _player?: null,
      _pos?: null
    ): NewPlayerEventFilter;
    NewPlayer(_player?: null, _pos?: null): NewPlayerEventFilter;

    "NewTroop(address,uint256,tuple,tuple)"(
      _player?: null,
      _troopId?: null,
      _troop?: null,
      _pos?: null
    ): NewTroopEventFilter;
    NewTroop(
      _player?: null,
      _troopId?: null,
      _troop?: null,
      _pos?: null
    ): NewTroopEventFilter;

    "ProductionStarted(address,uint256,tuple)"(
      _player?: null,
      _baseId?: null,
      _production?: null
    ): ProductionStartedEventFilter;
    ProductionStarted(
      _player?: null,
      _baseId?: null,
      _production?: null
    ): ProductionStartedEventFilter;

    "Recovered(address,uint256)"(
      _player?: null,
      _troopId?: null
    ): RecoveredEventFilter;
    Recovered(_player?: null, _troopId?: null): RecoveredEventFilter;

    "Repaired(address,uint256,uint256)"(
      _player?: null,
      _troopId?: null,
      _health?: null
    ): RepairedEventFilter;
    Repaired(
      _player?: null,
      _troopId?: null,
      _health?: null
    ): RepairedEventFilter;
  };

  estimateGas: {
    _getAttackCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBase(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getCargoCapacity(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getEpochsToProduce(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getMovesPerEpoch(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hasPort(_tile: TileStruct, overrides?: CallOverrides): Promise<BigNumber>;

    _hasTroopTransport(
      _tile: TileStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    _isLandTroop(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _random(_max: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _strike(
      _strikeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getAttackCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getAttackFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBase(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBaseHealth(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getBaseOwner(
      _baseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getCargoCapacity(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getDamagePerHit(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getDefenseFactor(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getEpochsToProduce(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getMaxHealth(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getMovementCooldown(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getMovesPerEpoch(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTileAt(
      _pos: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTroop(
      _troopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hasPort(
      _tile: TileStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hasTroopTransport(
      _tile: TileStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _inBound(
      _p: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isLandTroop(
      _troopTypeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _random(
      _max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _samePos(
      _p1: PositionStruct,
      _p2: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _strike(
      _strikeFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _withinDist(
      _p1: PositionStruct,
      _p2: PositionStruct,
      _dist: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
