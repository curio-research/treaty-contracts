/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export interface WalletHangingGardenInterface extends utils.Interface {
  functions: {
    'executeGameTX(bytes)': FunctionFragment;
    'isOwner(address)': FunctionFragment;
    'owners(uint256)': FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: 'executeGameTX' | 'isOwner' | 'owners'): FunctionFragment;

  encodeFunctionData(functionFragment: 'executeGameTX', values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: 'isOwner', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'owners', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'executeGameTX', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owners', data: BytesLike): Result;

  events: {};
}

export interface WalletHangingGarden extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WalletHangingGardenInterface;

  queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeGameTX(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    isOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    owners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
  };

  executeGameTX(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  isOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  owners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    executeGameTX(_data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    isOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    owners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    executeGameTX(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    isOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    executeGameTX(_data: PromiseOrValue<BytesLike>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    isOwner(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
