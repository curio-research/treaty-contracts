/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type PositionStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
};

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type WorldConstantsStruct = {
  admin: PromiseOrValue<string>;
  cityCenterLevelToEntityLevelRatio: PromiseOrValue<BigNumberish>;
  gameLengthInSeconds: PromiseOrValue<BigNumberish>;
  gameMode: PromiseOrValue<BigNumberish>;
  maxArmyCountPerPlayer: PromiseOrValue<BigNumberish>;
  maxCityCenterLevel: PromiseOrValue<BigNumberish>;
  maxCityCountPerPlayer: PromiseOrValue<BigNumberish>;
  maxPlayerCount: PromiseOrValue<BigNumberish>;
  numInitTerrainTypes: PromiseOrValue<BigNumberish>;
  secondsToTrainAThousandTroops: PromiseOrValue<BigNumberish>;
  tileWidth: PromiseOrValue<BigNumberish>;
  worldHeight: PromiseOrValue<BigNumberish>;
  worldWidth: PromiseOrValue<BigNumberish>;
};

export type WorldConstantsStructOutput = [
  string,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  admin: string;
  cityCenterLevelToEntityLevelRatio: BigNumber;
  gameLengthInSeconds: BigNumber;
  gameMode: number;
  maxArmyCountPerPlayer: BigNumber;
  maxCityCenterLevel: BigNumber;
  maxCityCountPerPlayer: BigNumber;
  maxPlayerCount: BigNumber;
  numInitTerrainTypes: BigNumber;
  secondsToTrainAThousandTroops: BigNumber;
  tileWidth: BigNumber;
  worldHeight: BigNumber;
  worldWidth: BigNumber;
};

export interface GetterFacetInterface extends utils.Interface {
  functions: {
    "getAddressMaxLoadAndBalance(address,string)": FunctionFragment;
    "getArmyAt((uint256,uint256))": FunctionFragment;
    "getArmyFood(uint256)": FunctionFragment;
    "getArmyIDByAddress(address)": FunctionFragment;
    "getCapital(uint256)": FunctionFragment;
    "getCityAtTile((uint256,uint256))": FunctionFragment;
    "getComponent(string)": FunctionFragment;
    "getComponentById(uint256)": FunctionFragment;
    "getConstant(string,string,string,string,uint256)": FunctionFragment;
    "getConstituentAtTile(uint256)": FunctionFragment;
    "getConstituents(uint256)": FunctionFragment;
    "getEntities()": FunctionFragment;
    "getEntitiesAddr()": FunctionFragment;
    "getEntity()": FunctionFragment;
    "getEntityLevel(uint256)": FunctionFragment;
    "getEntityNation(uint256)": FunctionFragment;
    "getEntityWallet(uint256)": FunctionFragment;
    "getInventory(address,string)": FunctionFragment;
    "getInventoryBalance(address,string)": FunctionFragment;
    "getInventoryByCityAndType(uint256,string)": FunctionFragment;
    "getMainBurnerAccount(address)": FunctionFragment;
    "getNationArmies(uint256)": FunctionFragment;
    "getNationIDByAddress(address)": FunctionFragment;
    "getNationName(uint256)": FunctionFragment;
    "getPlayerCount()": FunctionFragment;
    "getPositionExternal(string,uint256)": FunctionFragment;
    "getResourceAtTile((uint256,uint256))": FunctionFragment;
    "getTemplateByInventoryType(string)": FunctionFragment;
    "getTileAt((uint256,uint256))": FunctionFragment;
    "getWorldConstants()": FunctionFragment;
    "isPlayerInitialized(address)": FunctionFragment;
    "playersAndIdsMatch(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAddressMaxLoadAndBalance"
      | "getArmyAt"
      | "getArmyFood"
      | "getArmyIDByAddress"
      | "getCapital"
      | "getCityAtTile"
      | "getComponent"
      | "getComponentById"
      | "getConstant"
      | "getConstituentAtTile"
      | "getConstituents"
      | "getEntities"
      | "getEntitiesAddr"
      | "getEntity"
      | "getEntityLevel"
      | "getEntityNation"
      | "getEntityWallet"
      | "getInventory"
      | "getInventoryBalance"
      | "getInventoryByCityAndType"
      | "getMainBurnerAccount"
      | "getNationArmies"
      | "getNationIDByAddress"
      | "getNationName"
      | "getPlayerCount"
      | "getPositionExternal"
      | "getResourceAtTile"
      | "getTemplateByInventoryType"
      | "getTileAt"
      | "getWorldConstants"
      | "isPlayerInitialized"
      | "playersAndIdsMatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAddressMaxLoadAndBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArmyAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getArmyFood",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getArmyIDByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCapital",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCityAtTile",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getComponentById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConstant",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getConstituentAtTile",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConstituents",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntitiesAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getEntity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEntityLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityNation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntityWallet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInventory",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInventoryBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInventoryByCityAndType",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainBurnerAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNationArmies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNationIDByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNationName",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionExternal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getResourceAtTile",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getTemplateByInventoryType",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTileAt",
    values: [PositionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorldConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInitialized",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playersAndIdsMatch",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAddressMaxLoadAndBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getArmyAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArmyFood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArmyIDByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCapital", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCityAtTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getComponentById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConstituentAtTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConstituents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntitiesAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEntity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEntityLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityNation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventoryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInventoryByCityAndType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainBurnerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNationArmies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNationIDByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNationName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResourceAtTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTemplateByInventoryType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTileAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWorldConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playersAndIdsMatch",
    data: BytesLike
  ): Result;

  events: {};
}

export interface GetterFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GetterFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAddressMaxLoadAndBalance(
      _entityAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getArmyAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getArmyFood(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getArmyIDByAddress(
      _armyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCapital(
      _cityID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCityAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getComponent(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getComponentById(
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getConstant(
      _subject: PromiseOrValue<string>,
      _object: PromiseOrValue<string>,
      _componentName: PromiseOrValue<string>,
      _functionName: PromiseOrValue<string>,
      _level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConstituentAtTile(
      _tileID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getConstituents(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEntities(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getEntitiesAddr(overrides?: CallOverrides): Promise<[string]>;

    getEntity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEntityLevel(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntityNation(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntityWallet(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInventory(
      _inventoryAddress: PromiseOrValue<string>,
      _templateString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInventoryBalance(
      _keeperAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getInventoryByCityAndType(
      _cityID: PromiseOrValue<BigNumberish>,
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMainBurnerAccount(
      _primaryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNationArmies(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNationIDByAddress(
      _nationWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNationName(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPlayerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPositionExternal(
      _componentName: PromiseOrValue<string>,
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput]>;

    getResourceAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTemplateByInventoryType(
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<[WorldConstantsStructOutput]>;

    isPlayerInitialized(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    playersAndIdsMatch(
      nations: PromiseOrValue<string>[],
      nationIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  getAddressMaxLoadAndBalance(
    _entityAddress: PromiseOrValue<string>,
    _resourceType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getArmyAt(
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getArmyFood(
    _armyID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getArmyIDByAddress(
    _armyAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCapital(
    _cityID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCityAtTile(
    _startPosition: PositionStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getComponent(
    _name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getComponentById(
    _entity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getConstant(
    _subject: PromiseOrValue<string>,
    _object: PromiseOrValue<string>,
    _componentName: PromiseOrValue<string>,
    _functionName: PromiseOrValue<string>,
    _level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConstituentAtTile(
    _tileID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getConstituents(
    _armyID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEntities(overrides?: CallOverrides): Promise<BigNumber[]>;

  getEntitiesAddr(overrides?: CallOverrides): Promise<string>;

  getEntity(overrides?: CallOverrides): Promise<BigNumber>;

  getEntityLevel(
    _entityID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntityNation(
    _entityID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntityWallet(
    _entityID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInventory(
    _inventoryAddress: PromiseOrValue<string>,
    _templateString: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInventoryBalance(
    _keeperAddress: PromiseOrValue<string>,
    _resourceType: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getInventoryByCityAndType(
    _cityID: PromiseOrValue<BigNumberish>,
    _inventoryType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMainBurnerAccount(
    _primaryAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNationArmies(
    _nationID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNationIDByAddress(
    _nationWalletAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNationName(
    _nationID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

  getPositionExternal(
    _componentName: PromiseOrValue<string>,
    _entity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  getResourceAtTile(
    _startPosition: PositionStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTemplateByInventoryType(
    _inventoryType: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTileAt(
    _position: PositionStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWorldConstants(
    overrides?: CallOverrides
  ): Promise<WorldConstantsStructOutput>;

  isPlayerInitialized(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  playersAndIdsMatch(
    nations: PromiseOrValue<string>[],
    nationIDs: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getAddressMaxLoadAndBalance(
      _entityAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getArmyAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArmyFood(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArmyIDByAddress(
      _armyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapital(
      _cityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCityAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponent(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getComponentById(
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getConstant(
      _subject: PromiseOrValue<string>,
      _object: PromiseOrValue<string>,
      _componentName: PromiseOrValue<string>,
      _functionName: PromiseOrValue<string>,
      _level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConstituentAtTile(
      _tileID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConstituents(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEntities(overrides?: CallOverrides): Promise<BigNumber[]>;

    getEntitiesAddr(overrides?: CallOverrides): Promise<string>;

    getEntity(overrides?: CallOverrides): Promise<BigNumber>;

    getEntityLevel(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityNation(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityWallet(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInventory(
      _inventoryAddress: PromiseOrValue<string>,
      _templateString: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInventoryBalance(
      _keeperAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInventoryByCityAndType(
      _cityID: PromiseOrValue<BigNumberish>,
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainBurnerAccount(
      _primaryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNationArmies(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getNationIDByAddress(
      _nationWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNationName(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionExternal(
      _componentName: PromiseOrValue<string>,
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    getResourceAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTemplateByInventoryType(
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldConstants(
      overrides?: CallOverrides
    ): Promise<WorldConstantsStructOutput>;

    isPlayerInitialized(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    playersAndIdsMatch(
      nations: PromiseOrValue<string>[],
      nationIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getAddressMaxLoadAndBalance(
      _entityAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getArmyAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArmyFood(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getArmyIDByAddress(
      _armyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCapital(
      _cityID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCityAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponent(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getComponentById(
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConstant(
      _subject: PromiseOrValue<string>,
      _object: PromiseOrValue<string>,
      _componentName: PromiseOrValue<string>,
      _functionName: PromiseOrValue<string>,
      _level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConstituentAtTile(
      _tileID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConstituents(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntities(overrides?: CallOverrides): Promise<BigNumber>;

    getEntitiesAddr(overrides?: CallOverrides): Promise<BigNumber>;

    getEntity(overrides?: CallOverrides): Promise<BigNumber>;

    getEntityLevel(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityNation(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntityWallet(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInventory(
      _inventoryAddress: PromiseOrValue<string>,
      _templateString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInventoryBalance(
      _keeperAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getInventoryByCityAndType(
      _cityID: PromiseOrValue<BigNumberish>,
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainBurnerAccount(
      _primaryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNationArmies(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNationIDByAddress(
      _nationWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNationName(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPositionExternal(
      _componentName: PromiseOrValue<string>,
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResourceAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTemplateByInventoryType(
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorldConstants(overrides?: CallOverrides): Promise<BigNumber>;

    isPlayerInitialized(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playersAndIdsMatch(
      nations: PromiseOrValue<string>[],
      nationIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddressMaxLoadAndBalance(
      _entityAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getArmyAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArmyFood(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArmyIDByAddress(
      _armyAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCapital(
      _cityID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCityAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponent(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComponentById(
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConstant(
      _subject: PromiseOrValue<string>,
      _object: PromiseOrValue<string>,
      _componentName: PromiseOrValue<string>,
      _functionName: PromiseOrValue<string>,
      _level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConstituentAtTile(
      _tileID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConstituents(
      _armyID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntities(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntitiesAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEntityLevel(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntityNation(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntityWallet(
      _entityID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInventory(
      _inventoryAddress: PromiseOrValue<string>,
      _templateString: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInventoryBalance(
      _keeperAddress: PromiseOrValue<string>,
      _resourceType: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getInventoryByCityAndType(
      _cityID: PromiseOrValue<BigNumberish>,
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainBurnerAccount(
      _primaryAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNationArmies(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNationIDByAddress(
      _nationWalletAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNationName(
      _nationID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPositionExternal(
      _componentName: PromiseOrValue<string>,
      _entity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResourceAtTile(
      _startPosition: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTemplateByInventoryType(
      _inventoryType: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTileAt(
      _position: PositionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorldConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPlayerInitialized(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playersAndIdsMatch(
      nations: PromiseOrValue<string>[],
      nationIDs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
