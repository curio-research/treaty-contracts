/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface FTXInterface extends utils.Interface {
  functions: {
    "deposit(uint256)": FunctionFragment;
    "diamond()": FunctionFragment;
    "fttToken()": FunctionFragment;
    "getter()": FunctionFragment;
    "goldToken()": FunctionFragment;
    "isBankrupt()": FunctionFragment;
    "name()": FunctionFragment;
    "run()": FunctionFragment;
    "sbfAddress()": FunctionFragment;
    "sbfCapitalAddress()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deposit"
      | "diamond"
      | "fttToken"
      | "getter"
      | "goldToken"
      | "isBankrupt"
      | "name"
      | "run"
      | "sbfAddress"
      | "sbfCapitalAddress"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "diamond", values?: undefined): string;
  encodeFunctionData(functionFragment: "fttToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "getter", values?: undefined): string;
  encodeFunctionData(functionFragment: "goldToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isBankrupt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "run", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sbfAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sbfCapitalAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "diamond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fttToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goldToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBankrupt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sbfAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sbfCapitalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface FTX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FTXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamond(overrides?: CallOverrides): Promise<[string]>;

    fttToken(overrides?: CallOverrides): Promise<[string]>;

    getter(overrides?: CallOverrides): Promise<[string]>;

    goldToken(overrides?: CallOverrides): Promise<[string]>;

    isBankrupt(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    run(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sbfAddress(overrides?: CallOverrides): Promise<[string]>;

    sbfCapitalAddress(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamond(overrides?: CallOverrides): Promise<string>;

  fttToken(overrides?: CallOverrides): Promise<string>;

  getter(overrides?: CallOverrides): Promise<string>;

  goldToken(overrides?: CallOverrides): Promise<string>;

  isBankrupt(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  run(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sbfAddress(overrides?: CallOverrides): Promise<string>;

  sbfCapitalAddress(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    diamond(overrides?: CallOverrides): Promise<string>;

    fttToken(overrides?: CallOverrides): Promise<string>;

    getter(overrides?: CallOverrides): Promise<string>;

    goldToken(overrides?: CallOverrides): Promise<string>;

    isBankrupt(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    run(overrides?: CallOverrides): Promise<boolean>;

    sbfAddress(overrides?: CallOverrides): Promise<string>;

    sbfCapitalAddress(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamond(overrides?: CallOverrides): Promise<BigNumber>;

    fttToken(overrides?: CallOverrides): Promise<BigNumber>;

    getter(overrides?: CallOverrides): Promise<BigNumber>;

    goldToken(overrides?: CallOverrides): Promise<BigNumber>;

    isBankrupt(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    run(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sbfAddress(overrides?: CallOverrides): Promise<BigNumber>;

    sbfCapitalAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fttToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    goldToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isBankrupt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    run(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sbfAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sbfCapitalAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
