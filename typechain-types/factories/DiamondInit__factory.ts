/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DiamondInit, DiamondInitInterface } from "../DiamondInit";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "admin",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "worldWidth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "worldHeight",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "combatEfficiency",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numInitTerrainTypes",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "initBatchSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "initPlayerGoldBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "initPlayerOilBalance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseCountPerPlayer",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxTroopCountPerPlayer",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPlayerCount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "defaultBaseGoldGenerationPerSecond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "defaultWellOilGenerationPerSecond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "debuffFactor",
            type: "uint256",
          },
        ],
        internalType: "struct WorldConstants",
        name: "_worldConstants",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "enum TROOP_NAME",
            name: "name",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "maxHealth",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "damagePerHit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "attackFactor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "defenseFactor",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "movementCooldown",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "largeActionCooldown",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "goldPrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "oilConsumptionPerSecond",
            type: "uint256",
          },
        ],
        internalType: "struct TroopType[]",
        name: "_troopTypes",
        type: "tuple[]",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610904806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063692cf97614610030575b600080fd5b61004361003e366004610700565b610045565b005b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f60209081527f699d9daa71b280d05a152715774afa0a81a312594b2d731d6b0b2552b7d6f69f8054600160ff1991821681179092557ff97e938d8af42f52387bb74b8b526fda8f184cc2aa534340a8d75a88fbecc77580548216831790557f65d510a5d8f7ef134ec444f7f34ee808c8eeb5177cdfd16be0c40fe1ab43369580548216831790557f7f5828d00000000000000000000000000000000000000000000000000000000060009081527f5622121b47b8cd0120c4efe45dd5483242f54a3d49bd7679be565d47694918c38054909216909217905583517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055908301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba0895560408301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08a5560608301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08b5560808301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08c5560a08301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08d5560c08301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08e5560e08301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08f556101008301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba090556101208301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba091556101408301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba092556101608301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba093556101808301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba094556101a08301517f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba095557fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c905b825181101561051b577f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae777409626103fb82600161086f565b81546001810183556000928352602090922090910155825183908290811061043357634e487b7160e01b600052603260045260246000fd5b60200260200101516104627f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08690565b63047868dd01600061047584600161086f565b8152602081019190915260400160002081518154829060ff191660018360038111156104b157634e487b7160e01b600052602160045260246000fd5b02179055506020820151600182015560408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e08201516007820155610100909101516008909101558061051381610887565b9150506103c6565b507f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae7774095e805490600061054b83610887565b91905055506105777f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08690565b63047868d901805490600061058b83610887565b91905055506105b77f55a00bec60f0186444b50c10b732dd4123adc4f1d8b00b50012262ae72fba08690565b63047868d40180549060006105cb83610887565b9190505550505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146105f957600080fd5b919050565b600082601f83011261060e578081fd5b8135602067ffffffffffffffff82111561062a5761062a6108b8565b610638818360051b0161083e565b8281528181019085830161012080860288018501891015610657578687fd5b865b868110156106e35781838b03121561066f578788fd5b6106776107f0565b610680846106f1565b8152838701358782015260408085013590820152606080850135908201526080808501359082015260a0808501359082015260c0808501359082015260e08085013590820152610100808501359082015285529385019391810191600101610659565b509198975050505050505050565b8035600481106105f957600080fd5b6000808284036101e0811215610714578283fd5b6101c080821215610723578384fd5b61072b61081a565b9150610736856105d5565b82526020858101359083015260408086013590830152606080860135908301526080808601359083015260a0808601359083015260c0808601359083015260e08086013590830152610100808601359083015261012080860135908301526101408086013590830152610160808601359083015261018080860135908301526101a0808601359083015290925083013567ffffffffffffffff8111156107da578182fd5b6107e6858286016105fe565b9150509250929050565b604051610120810167ffffffffffffffff81118282101715610814576108146108b8565b60405290565b6040516101c0810167ffffffffffffffff81118282101715610814576108146108b8565b604051601f8201601f1916810167ffffffffffffffff81118282101715610867576108676108b8565b604052919050565b60008219821115610882576108826108a2565b500190565b600060001982141561089b5761089b6108a2565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212201649e13951b0af1ea6ea92348a1ad30acce1375ab1af85c5c7734b82c1bac16d64736f6c63430008040033";

type DiamondInitConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DiamondInitConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DiamondInit__factory extends ContractFactory {
  constructor(...args: DiamondInitConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DiamondInit> {
    return super.deploy(overrides || {}) as Promise<DiamondInit>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DiamondInit {
    return super.attach(address) as DiamondInit;
  }
  connect(signer: Signer): DiamondInit__factory {
    return super.connect(signer) as DiamondInit__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DiamondInitInterface {
    return new utils.Interface(_abi) as DiamondInitInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DiamondInit {
    return new Contract(address, _abi, signerOrProvider) as DiamondInit;
  }
}
