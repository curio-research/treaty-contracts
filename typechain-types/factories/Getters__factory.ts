/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Getters, GettersInterface } from "../Getters";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Game",
        name: "_gameCore",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bulkGetAllItems",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "mineable",
            type: "bool",
          },
          {
            internalType: "uint256[]",
            name: "mineItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "strength",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "craftable",
            type: "bool",
          },
          {
            internalType: "uint256[]",
            name: "craftItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "craftItemAmounts",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "occupiable",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "healthDamage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energyDamage",
            type: "uint256",
          },
        ],
        internalType: "struct GameTypes.ItemWithMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bulkGetAllPlayerData",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "initTimestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "playerAddr",
            type: "address",
          },
          {
            internalType: "bool",
            name: "alive",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct GameTypes.Position",
            name: "position",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "health",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energy",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reach",
            type: "uint256",
          },
        ],
        internalType: "struct GameTypes.PlayerData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200135338038062001353833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b6000815190506200008f8162000109565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000e9565b9050919050565b6000620000e282620000c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011481620000d5565b81146200012057600080fd5b50565b61122080620001336000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dbefbac1461003b578063fab6a1b814610059575b600080fd5b610043610077565b6040516100509190610edb565b60405180910390f35b6100616102f6565b60405161006e9190610eb9565b60405180910390f35b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f261e076040518163ffffffff1660e01b815260040160006040518083038186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061011f9190610a63565b90506000815167ffffffffffffffff811115610164577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561019d57816020015b61018a6105f0565b8152602001906001900390816101825790505b50905060005b82518110156102ed5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663908b9f17848381518110610221577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016102459190610e9e565b6101206040518083038186803b15801561025e57600080fd5b505afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102969190610ae5565b8282815181106102cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806102e5906110ed565b9150506101a3565b50809250505090565b60606000600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610b0f565b6103a49190611040565b67ffffffffffffffff8111156103e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561041c57816020015b610409610655565b8152602001906001900390816104015790505b5090506000600190505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610b0f565b8110156105e85760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663801b83db6001836105149190611040565b6040518263ffffffff1660e01b81526004016105309190610efd565b60006040518083038186803b15801561054857600080fd5b505afa15801561055c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105859190610aa4565b826001836105939190611040565b815181106105ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806105e0906110ed565b915050610426565b508091505090565b60405180610100016040528060001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200161063a6106a7565b81526020016000815260200160008152602001600081525090565b6040518061012001604052806000151581526020016060815260200160008152602001600015158152602001606081526020016060815260200160001515815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b60006106d46106cf84610f3d565b610f18565b905080838252602082019050828560208602820111156106f357600080fd5b60005b8581101561072357816107098882610799565b8452602084019350602083019250506001810190506106f6565b5050509392505050565b600061074061073b84610f69565b610f18565b9050808382526020820190508285602086028201111561075f57600080fd5b60005b8581101561078f57816107758882610a4e565b845260208401935060208301925050600181019050610762565b5050509392505050565b6000815190506107a8816111a5565b92915050565b600082601f8301126107bf57600080fd5b81516107cf8482602086016106c1565b91505092915050565b600082601f8301126107e957600080fd5b81516107f984826020860161072d565b91505092915050565b600081519050610811816111bc565b92915050565b6000610120828403121561082a57600080fd5b610835610120610f18565b9050600061084584828501610802565b600083015250602082015167ffffffffffffffff81111561086557600080fd5b610871848285016107d8565b602083015250604061088584828501610a4e565b604083015250606061089984828501610802565b606083015250608082015167ffffffffffffffff8111156108b957600080fd5b6108c5848285016107d8565b60808301525060a082015167ffffffffffffffff8111156108e557600080fd5b6108f1848285016107d8565b60a08301525060c061090584828501610802565b60c08301525060e061091984828501610a4e565b60e08301525061010061092e84828501610a4e565b6101008301525092915050565b6000610120828403121561094e57600080fd5b610959610100610f18565b9050600061096984828501610802565b600083015250602061097d84828501610a4e565b602083015250604061099184828501610799565b60408301525060606109a584828501610802565b60608301525060806109b984828501610a02565b60808301525060c06109cd84828501610a4e565b60a08301525060e06109e184828501610a4e565b60c0830152506101006109f684828501610a4e565b60e08301525092915050565b600060408284031215610a1457600080fd5b610a1e6040610f18565b90506000610a2e84828501610a4e565b6000830152506020610a4284828501610a4e565b60208301525092915050565b600081519050610a5d816111d3565b92915050565b600060208284031215610a7557600080fd5b600082015167ffffffffffffffff811115610a8f57600080fd5b610a9b848285016107ae565b91505092915050565b600060208284031215610ab657600080fd5b600082015167ffffffffffffffff811115610ad057600080fd5b610adc84828501610817565b91505092915050565b60006101208284031215610af857600080fd5b6000610b068482850161093b565b91505092915050565b600060208284031215610b2157600080fd5b6000610b2f84828501610a4e565b91505092915050565b6000610b448383610cdb565b905092915050565b6000610b588383610dae565b6101208301905092915050565b6000610b718383610e80565b60208301905092915050565b610b8681611074565b82525050565b610b9581611074565b82525050565b6000610ba682610fc5565b610bb0818561100d565b935083602082028501610bc285610f95565b8060005b85811015610bfe5784840389528151610bdf8582610b38565b9450610bea83610fe6565b925060208a01995050600181019050610bc6565b50829750879550505050505092915050565b6000610c1b82610fd0565b610c25818561101e565b9350610c3083610fa5565b8060005b83811015610c61578151610c488882610b4c565b9750610c5383610ff3565b925050600181019050610c34565b5085935050505092915050565b6000610c7982610fdb565b610c83818561102f565b9350610c8e83610fb5565b8060005b83811015610cbf578151610ca68882610b65565b9750610cb183611000565b925050600181019050610c92565b5085935050505092915050565b610cd581611086565b82525050565b600061012083016000830151610cf46000860182610ccc565b5060208301518482036020860152610d0c8282610c6e565b9150506040830151610d216040860182610e80565b506060830151610d346060860182610ccc565b5060808301518482036080860152610d4c8282610c6e565b91505060a083015184820360a0860152610d668282610c6e565b91505060c0830151610d7b60c0860182610ccc565b5060e0830151610d8e60e0860182610e80565b50610100830151610da3610100860182610e80565b508091505092915050565b61012082016000820151610dc56000850182610ccc565b506020820151610dd86020850182610e80565b506040820151610deb6040850182610b7d565b506060820151610dfe6060850182610ccc565b506080820151610e116080850182610e51565b5060a0820151610e2460c0850182610e80565b5060c0820151610e3760e0850182610e80565b5060e0820151610e4b610100850182610e80565b50505050565b604082016000820151610e676000850182610e80565b506020820151610e7a6020850182610e80565b50505050565b610e89816110b2565b82525050565b610e98816110b2565b82525050565b6000602082019050610eb36000830184610b8c565b92915050565b60006020820190508181036000830152610ed38184610b9b565b905092915050565b60006020820190508181036000830152610ef58184610c10565b905092915050565b6000602082019050610f126000830184610e8f565b92915050565b6000610f22610f33565b9050610f2e82826110bc565b919050565b6000604051905090565b600067ffffffffffffffff821115610f5857610f57611165565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f8457610f83611165565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061104b826110b2565b9150611056836110b2565b92508282101561106957611068611136565b5b828203905092915050565b600061107f82611092565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6110c582611194565b810181811067ffffffffffffffff821117156110e4576110e3611165565b5b80604052505050565b60006110f8826110b2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561112b5761112a611136565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6111ae81611074565b81146111b957600080fd5b50565b6111c581611086565b81146111d057600080fd5b50565b6111dc816110b2565b81146111e757600080fd5b5056fea26469706673582212209237ce2615c6f614dd197b31d44f83ed5c259814b45e1b95c029c8a4f73fdfa164736f6c63430008040033";

type GettersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GettersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Getters__factory extends ContractFactory {
  constructor(...args: GettersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Getters> {
    return super.deploy(_gameCore, overrides || {}) as Promise<Getters>;
  }
  getDeployTransaction(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameCore, overrides || {});
  }
  attach(address: string): Getters {
    return super.attach(address) as Getters;
  }
  connect(signer: Signer): Getters__factory {
    return super.connect(signer) as Getters__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GettersInterface {
    return new utils.Interface(_abi) as GettersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Getters {
    return new Contract(address, _abi, signerOrProvider) as Getters;
  }
}
