/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Getters, GettersInterface } from "../Getters";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Game",
        name: "_gameCore",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bulkGetAllItems",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "mineable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "craftable",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "occupiable",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "strength",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "healthDamage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energyDamage",
            type: "uint256",
          },
          {
            internalType: "uint256[]",
            name: "mineItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "craftItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "craftItemAmounts",
            type: "uint256[]",
          },
        ],
        internalType: "struct GameTypes.ItemWithMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bulkGetAllPlayerData",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "initTimestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "playerAddr",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "health",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energy",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reach",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct GameTypes.Position",
            name: "position",
            type: "tuple",
          },
        ],
        internalType: "struct GameTypes.PlayerData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200131f3803806200131f833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b6000815190506200008f8162000109565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000e9565b9050919050565b6000620000e282620000c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011481620000d5565b81146200012057600080fd5b50565b6111ec80620001336000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dbefbac1461003b578063fab6a1b814610059575b600080fd5b610043610077565b6040516100509190610ea7565b60405180910390f35b6100616102f6565b60405161006e9190610e85565b60405180910390f35b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f261e076040518163ffffffff1660e01b815260040160006040518083038186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061011f9190610a43565b90506000815167ffffffffffffffff811115610164577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561019d57816020015b61018a6105f0565b8152602001906001900390816101825790505b50905060005b82518110156102ed5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663908b9f17848381518110610221577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016102459190610e6a565b6101006040518083038186803b15801561025e57600080fd5b505afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102969190610ac5565b8282815181106102cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806102e5906110b9565b9150506101a3565b50809250505090565b60606000600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610aef565b6103a4919061100c565b67ffffffffffffffff8111156103e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561041c57816020015b61040961064b565b8152602001906001900390816104015790505b5090506000600190505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610aef565b8110156105e85760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663801b83db600183610514919061100c565b6040518263ffffffff1660e01b81526004016105309190610ec9565b60006040518083038186803b15801561054857600080fd5b505afa15801561055c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105859190610a84565b82600183610593919061100c565b815181106105ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806105e0906110b9565b915050610426565b508091505090565b6040518060e0016040528060001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200161064561069d565b81525090565b6040518061012001604052806000151581526020016000151581526020016000151581526020016000815260200160008152602001600081526020016060815260200160608152602001606081525090565b604051806040016040528060008152602001600081525090565b60006106ca6106c584610f09565b610ee4565b905080838252602082019050828560208602820111156106e957600080fd5b60005b8581101561071957816106ff888261078f565b8452602084019350602083019250506001810190506106ec565b5050509392505050565b600061073661073184610f35565b610ee4565b9050808382526020820190508285602086028201111561075557600080fd5b60005b85811015610785578161076b8882610a2e565b845260208401935060208301925050600181019050610758565b5050509392505050565b60008151905061079e81611171565b92915050565b600082601f8301126107b557600080fd5b81516107c58482602086016106b7565b91505092915050565b600082601f8301126107df57600080fd5b81516107ef848260208601610723565b91505092915050565b60008151905061080781611188565b92915050565b6000610120828403121561082057600080fd5b61082b610120610ee4565b9050600061083b848285016107f8565b600083015250602061084f848285016107f8565b6020830152506040610863848285016107f8565b604083015250606061087784828501610a2e565b606083015250608061088b84828501610a2e565b60808301525060a061089f84828501610a2e565b60a08301525060c082015167ffffffffffffffff8111156108bf57600080fd5b6108cb848285016107ce565b60c08301525060e082015167ffffffffffffffff8111156108eb57600080fd5b6108f7848285016107ce565b60e08301525061010082015167ffffffffffffffff81111561091857600080fd5b610924848285016107ce565b6101008301525092915050565b6000610100828403121561094457600080fd5b61094e60e0610ee4565b9050600061095e848285016107f8565b600083015250602061097284828501610a2e565b60208301525060406109868482850161078f565b604083015250606061099a84828501610a2e565b60608301525060806109ae84828501610a2e565b60808301525060a06109c284828501610a2e565b60a08301525060c06109d6848285016109e2565b60c08301525092915050565b6000604082840312156109f457600080fd5b6109fe6040610ee4565b90506000610a0e84828501610a2e565b6000830152506020610a2284828501610a2e565b60208301525092915050565b600081519050610a3d8161119f565b92915050565b600060208284031215610a5557600080fd5b600082015167ffffffffffffffff811115610a6f57600080fd5b610a7b848285016107a4565b91505092915050565b600060208284031215610a9657600080fd5b600082015167ffffffffffffffff811115610ab057600080fd5b610abc8482850161080d565b91505092915050565b60006101008284031215610ad857600080fd5b6000610ae684828501610931565b91505092915050565b600060208284031215610b0157600080fd5b6000610b0f84828501610a2e565b91505092915050565b6000610b248383610cbb565b905092915050565b6000610b388383610d8e565b6101008301905092915050565b6000610b518383610e4c565b60208301905092915050565b610b6681611040565b82525050565b610b7581611040565b82525050565b6000610b8682610f91565b610b908185610fd9565b935083602082028501610ba285610f61565b8060005b85811015610bde5784840389528151610bbf8582610b18565b9450610bca83610fb2565b925060208a01995050600181019050610ba6565b50829750879550505050505092915050565b6000610bfb82610f9c565b610c058185610fea565b9350610c1083610f71565b8060005b83811015610c41578151610c288882610b2c565b9750610c3383610fbf565b925050600181019050610c14565b5085935050505092915050565b6000610c5982610fa7565b610c638185610ffb565b9350610c6e83610f81565b8060005b83811015610c9f578151610c868882610b45565b9750610c9183610fcc565b925050600181019050610c72565b5085935050505092915050565b610cb581611052565b82525050565b600061012083016000830151610cd46000860182610cac565b506020830151610ce76020860182610cac565b506040830151610cfa6040860182610cac565b506060830151610d0d6060860182610e4c565b506080830151610d206080860182610e4c565b5060a0830151610d3360a0860182610e4c565b5060c083015184820360c0860152610d4b8282610c4e565b91505060e083015184820360e0860152610d658282610c4e565b915050610100830151848203610100860152610d818282610c4e565b9150508091505092915050565b61010082016000820151610da56000850182610cac565b506020820151610db86020850182610e4c565b506040820151610dcb6040850182610b5d565b506060820151610dde6060850182610e4c565b506080820151610df16080850182610e4c565b5060a0820151610e0460a0850182610e4c565b5060c0820151610e1760c0850182610e1d565b50505050565b604082016000820151610e336000850182610e4c565b506020820151610e466020850182610e4c565b50505050565b610e558161107e565b82525050565b610e648161107e565b82525050565b6000602082019050610e7f6000830184610b6c565b92915050565b60006020820190508181036000830152610e9f8184610b7b565b905092915050565b60006020820190508181036000830152610ec18184610bf0565b905092915050565b6000602082019050610ede6000830184610e5b565b92915050565b6000610eee610eff565b9050610efa8282611088565b919050565b6000604051905090565b600067ffffffffffffffff821115610f2457610f23611131565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f5057610f4f611131565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006110178261107e565b91506110228361107e565b92508282101561103557611034611102565b5b828203905092915050565b600061104b8261105e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61109182611160565b810181811067ffffffffffffffff821117156110b0576110af611131565b5b80604052505050565b60006110c48261107e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110f7576110f6611102565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61117a81611040565b811461118557600080fd5b50565b61119181611052565b811461119c57600080fd5b50565b6111a88161107e565b81146111b357600080fd5b5056fea26469706673582212208e7831b06db4a33fcdcc52c214e3fa2a54c6554dde7a7cf512ded72d99fc134164736f6c63430008040033";

type GettersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GettersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Getters__factory extends ContractFactory {
  constructor(...args: GettersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Getters> {
    return super.deploy(_gameCore, overrides || {}) as Promise<Getters>;
  }
  getDeployTransaction(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameCore, overrides || {});
  }
  attach(address: string): Getters {
    return super.attach(address) as Getters;
  }
  connect(signer: Signer): Getters__factory {
    return super.connect(signer) as Getters__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GettersInterface {
    return new utils.Interface(_abi) as GettersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Getters {
    return new Contract(address, _abi, signerOrProvider) as Getters;
  }
}
