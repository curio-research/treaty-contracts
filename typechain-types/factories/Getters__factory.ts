/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Getters, GettersInterface } from "../Getters";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Game",
        name: "_gameCore",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bulkGetAllItems",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "mineable",
            type: "bool",
          },
          {
            internalType: "uint256[]",
            name: "mineItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "strength",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "craftable",
            type: "bool",
          },
          {
            internalType: "uint256[]",
            name: "craftItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "craftItemAmounts",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "occupiable",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "healthDamage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energyDamage",
            type: "uint256",
          },
        ],
        internalType: "struct GameTypes.ItemWithMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bulkGetAllPlayerData",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "initTimestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "playerAddr",
            type: "address",
          },
          {
            internalType: "bool",
            name: "alive",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct GameTypes.Position",
            name: "position",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "health",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energy",
            type: "uint256",
          },
        ],
        internalType: "struct GameTypes.PlayerData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200131538038062001315833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b6000815190506200008f8162000109565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000e9565b9050919050565b6000620000e282620000c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011481620000d5565b81146200012057600080fd5b50565b6111e280620001336000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dbefbac1461003b578063fab6a1b814610059575b600080fd5b610043610077565b6040516100509190610e9d565b60405180910390f35b6100616102f6565b60405161006e9190610e7b565b60405180910390f35b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f261e076040518163ffffffff1660e01b815260040160006040518083038186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061011f9190610a39565b90506000815167ffffffffffffffff811115610164577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561019d57816020015b61018a6105e4565b8152602001906001900390816101825790505b50905060005b82518110156102ed5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663908b9f17848381518110610221577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016102459190610e60565b6101006040518083038186803b15801561025e57600080fd5b505afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102969190610abb565b8282815181106102cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806102e5906110af565b9150506101a3565b50809250505090565b60606000600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610ae5565b6103a49190611002565b67ffffffffffffffff8111156103e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561041c57816020015b610409610641565b8152602001906001900390816104015790505b5090506000600190505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610ae5565b8110156105dc5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663801b83db826040518263ffffffff1660e01b81526004016105249190610ebf565b60006040518083038186803b15801561053c57600080fd5b505afa158015610550573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105799190610a7a565b826001836105879190611002565b815181106105be577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806105d4906110af565b915050610426565b508091505090565b6040518060e0016040528060001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200161062d610693565b815260200160008152602001600081525090565b6040518061012001604052806000151581526020016060815260200160008152602001600015158152602001606081526020016060815260200160001515815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b60006106c06106bb84610eff565b610eda565b905080838252602082019050828560208602820111156106df57600080fd5b60005b8581101561070f57816106f58882610785565b8452602084019350602083019250506001810190506106e2565b5050509392505050565b600061072c61072784610f2b565b610eda565b9050808382526020820190508285602086028201111561074b57600080fd5b60005b8581101561077b57816107618882610a24565b84526020840193506020830192505060018101905061074e565b5050509392505050565b60008151905061079481611167565b92915050565b600082601f8301126107ab57600080fd5b81516107bb8482602086016106ad565b91505092915050565b600082601f8301126107d557600080fd5b81516107e5848260208601610719565b91505092915050565b6000815190506107fd8161117e565b92915050565b6000610120828403121561081657600080fd5b610821610120610eda565b90506000610831848285016107ee565b600083015250602082015167ffffffffffffffff81111561085157600080fd5b61085d848285016107c4565b602083015250604061087184828501610a24565b6040830152506060610885848285016107ee565b606083015250608082015167ffffffffffffffff8111156108a557600080fd5b6108b1848285016107c4565b60808301525060a082015167ffffffffffffffff8111156108d157600080fd5b6108dd848285016107c4565b60a08301525060c06108f1848285016107ee565b60c08301525060e061090584828501610a24565b60e08301525061010061091a84828501610a24565b6101008301525092915050565b6000610100828403121561093a57600080fd5b61094460e0610eda565b90506000610954848285016107ee565b600083015250602061096884828501610a24565b602083015250604061097c84828501610785565b6040830152506060610990848285016107ee565b60608301525060806109a4848285016109d8565b60808301525060c06109b884828501610a24565b60a08301525060e06109cc84828501610a24565b60c08301525092915050565b6000604082840312156109ea57600080fd5b6109f46040610eda565b90506000610a0484828501610a24565b6000830152506020610a1884828501610a24565b60208301525092915050565b600081519050610a3381611195565b92915050565b600060208284031215610a4b57600080fd5b600082015167ffffffffffffffff811115610a6557600080fd5b610a718482850161079a565b91505092915050565b600060208284031215610a8c57600080fd5b600082015167ffffffffffffffff811115610aa657600080fd5b610ab284828501610803565b91505092915050565b60006101008284031215610ace57600080fd5b6000610adc84828501610927565b91505092915050565b600060208284031215610af757600080fd5b6000610b0584828501610a24565b91505092915050565b6000610b1a8383610cb1565b905092915050565b6000610b2e8383610d84565b6101008301905092915050565b6000610b478383610e42565b60208301905092915050565b610b5c81611036565b82525050565b610b6b81611036565b82525050565b6000610b7c82610f87565b610b868185610fcf565b935083602082028501610b9885610f57565b8060005b85811015610bd45784840389528151610bb58582610b0e565b9450610bc083610fa8565b925060208a01995050600181019050610b9c565b50829750879550505050505092915050565b6000610bf182610f92565b610bfb8185610fe0565b9350610c0683610f67565b8060005b83811015610c37578151610c1e8882610b22565b9750610c2983610fb5565b925050600181019050610c0a565b5085935050505092915050565b6000610c4f82610f9d565b610c598185610ff1565b9350610c6483610f77565b8060005b83811015610c95578151610c7c8882610b3b565b9750610c8783610fc2565b925050600181019050610c68565b5085935050505092915050565b610cab81611048565b82525050565b600061012083016000830151610cca6000860182610ca2565b5060208301518482036020860152610ce28282610c44565b9150506040830151610cf76040860182610e42565b506060830151610d0a6060860182610ca2565b5060808301518482036080860152610d228282610c44565b91505060a083015184820360a0860152610d3c8282610c44565b91505060c0830151610d5160c0860182610ca2565b5060e0830151610d6460e0860182610e42565b50610100830151610d79610100860182610e42565b508091505092915050565b61010082016000820151610d9b6000850182610ca2565b506020820151610dae6020850182610e42565b506040820151610dc16040850182610b53565b506060820151610dd46060850182610ca2565b506080820151610de76080850182610e13565b5060a0820151610dfa60c0850182610e42565b5060c0820151610e0d60e0850182610e42565b50505050565b604082016000820151610e296000850182610e42565b506020820151610e3c6020850182610e42565b50505050565b610e4b81611074565b82525050565b610e5a81611074565b82525050565b6000602082019050610e756000830184610b62565b92915050565b60006020820190508181036000830152610e958184610b71565b905092915050565b60006020820190508181036000830152610eb78184610be6565b905092915050565b6000602082019050610ed46000830184610e51565b92915050565b6000610ee4610ef5565b9050610ef0828261107e565b919050565b6000604051905090565b600067ffffffffffffffff821115610f1a57610f19611127565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f4657610f45611127565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061100d82611074565b915061101883611074565b92508282101561102b5761102a6110f8565b5b828203905092915050565b600061104182611054565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61108782611156565b810181811067ffffffffffffffff821117156110a6576110a5611127565b5b80604052505050565b60006110ba82611074565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110ed576110ec6110f8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61117081611036565b811461117b57600080fd5b50565b61118781611048565b811461119257600080fd5b50565b61119e81611074565b81146111a957600080fd5b5056fea2646970667358221220313a21f1f258a449c06aa3eadb8d0e4988411fe9ce53653259e27ef95c62f89164736f6c63430008040033";

type GettersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GettersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Getters__factory extends ContractFactory {
  constructor(...args: GettersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Getters> {
    return super.deploy(_gameCore, overrides || {}) as Promise<Getters>;
  }
  getDeployTransaction(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameCore, overrides || {});
  }
  attach(address: string): Getters {
    return super.attach(address) as Getters;
  }
  connect(signer: Signer): Getters__factory {
    return super.connect(signer) as Getters__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GettersInterface {
    return new utils.Interface(_abi) as GettersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Getters {
    return new Contract(address, _abi, signerOrProvider) as Getters;
  }
}
