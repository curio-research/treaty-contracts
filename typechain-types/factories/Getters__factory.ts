/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Getters, GettersInterface } from "../Getters";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Game",
        name: "_gameCore",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bulkGetAllItems",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "mineable",
            type: "bool",
          },
          {
            internalType: "uint256[]",
            name: "mineItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "strength",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "craftable",
            type: "bool",
          },
          {
            internalType: "uint256[]",
            name: "craftItemIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "craftItemAmounts",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "occupiable",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "healthDamage",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energyDamage",
            type: "uint256",
          },
        ],
        internalType: "struct GameTypes.ItemWithMetadata[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "bulkGetAllPlayerData",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "initialized",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "initTimestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "playerAddr",
            type: "address",
          },
          {
            internalType: "bool",
            name: "alive",
            type: "bool",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "x",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "y",
                type: "uint256",
              },
            ],
            internalType: "struct GameTypes.Position",
            name: "position",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "health",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "energy",
            type: "uint256",
          },
        ],
        internalType: "struct GameTypes.PlayerData[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200132138038062001321833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000123565b6000815190506200008f8162000109565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000e9565b9050919050565b6000620000e282620000c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200011481620000d5565b81146200012057600080fd5b50565b6111ee80620001336000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dbefbac1461003b578063fab6a1b814610059575b600080fd5b610043610077565b6040516100509190610ea9565b60405180910390f35b6100616102f6565b60405161006e9190610e87565b60405180910390f35b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633f261e076040518163ffffffff1660e01b815260040160006040518083038186803b1580156100e257600080fd5b505afa1580156100f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061011f9190610a45565b90506000815167ffffffffffffffff811115610164577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561019d57816020015b61018a6105f0565b8152602001906001900390816101825790505b50905060005b82518110156102ed5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663908b9f17848381518110610221577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016102459190610e6c565b6101006040518083038186803b15801561025e57600080fd5b505afa158015610272573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102969190610ac7565b8282815181106102cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806102e5906110bb565b9150506101a3565b50809250505090565b60606000600160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190610af1565b6103a4919061100e565b67ffffffffffffffff8111156103e3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561041c57816020015b61040961064d565b8152602001906001900390816104015790505b5090506000600190505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638bce7fab6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c49190610af1565b8110156105e85760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663801b83db600183610514919061100e565b6040518263ffffffff1660e01b81526004016105309190610ecb565b60006040518083038186803b15801561054857600080fd5b505afa15801561055c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105859190610a86565b82600183610593919061100e565b815181106105ca577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018190525080806105e0906110bb565b915050610426565b508091505090565b6040518060e0016040528060001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200161063961069f565b815260200160008152602001600081525090565b6040518061012001604052806000151581526020016060815260200160008152602001600015158152602001606081526020016060815260200160001515815260200160008152602001600081525090565b604051806040016040528060008152602001600081525090565b60006106cc6106c784610f0b565b610ee6565b905080838252602082019050828560208602820111156106eb57600080fd5b60005b8581101561071b57816107018882610791565b8452602084019350602083019250506001810190506106ee565b5050509392505050565b600061073861073384610f37565b610ee6565b9050808382526020820190508285602086028201111561075757600080fd5b60005b85811015610787578161076d8882610a30565b84526020840193506020830192505060018101905061075a565b5050509392505050565b6000815190506107a081611173565b92915050565b600082601f8301126107b757600080fd5b81516107c78482602086016106b9565b91505092915050565b600082601f8301126107e157600080fd5b81516107f1848260208601610725565b91505092915050565b6000815190506108098161118a565b92915050565b6000610120828403121561082257600080fd5b61082d610120610ee6565b9050600061083d848285016107fa565b600083015250602082015167ffffffffffffffff81111561085d57600080fd5b610869848285016107d0565b602083015250604061087d84828501610a30565b6040830152506060610891848285016107fa565b606083015250608082015167ffffffffffffffff8111156108b157600080fd5b6108bd848285016107d0565b60808301525060a082015167ffffffffffffffff8111156108dd57600080fd5b6108e9848285016107d0565b60a08301525060c06108fd848285016107fa565b60c08301525060e061091184828501610a30565b60e08301525061010061092684828501610a30565b6101008301525092915050565b6000610100828403121561094657600080fd5b61095060e0610ee6565b90506000610960848285016107fa565b600083015250602061097484828501610a30565b602083015250604061098884828501610791565b604083015250606061099c848285016107fa565b60608301525060806109b0848285016109e4565b60808301525060c06109c484828501610a30565b60a08301525060e06109d884828501610a30565b60c08301525092915050565b6000604082840312156109f657600080fd5b610a006040610ee6565b90506000610a1084828501610a30565b6000830152506020610a2484828501610a30565b60208301525092915050565b600081519050610a3f816111a1565b92915050565b600060208284031215610a5757600080fd5b600082015167ffffffffffffffff811115610a7157600080fd5b610a7d848285016107a6565b91505092915050565b600060208284031215610a9857600080fd5b600082015167ffffffffffffffff811115610ab257600080fd5b610abe8482850161080f565b91505092915050565b60006101008284031215610ada57600080fd5b6000610ae884828501610933565b91505092915050565b600060208284031215610b0357600080fd5b6000610b1184828501610a30565b91505092915050565b6000610b268383610cbd565b905092915050565b6000610b3a8383610d90565b6101008301905092915050565b6000610b538383610e4e565b60208301905092915050565b610b6881611042565b82525050565b610b7781611042565b82525050565b6000610b8882610f93565b610b928185610fdb565b935083602082028501610ba485610f63565b8060005b85811015610be05784840389528151610bc18582610b1a565b9450610bcc83610fb4565b925060208a01995050600181019050610ba8565b50829750879550505050505092915050565b6000610bfd82610f9e565b610c078185610fec565b9350610c1283610f73565b8060005b83811015610c43578151610c2a8882610b2e565b9750610c3583610fc1565b925050600181019050610c16565b5085935050505092915050565b6000610c5b82610fa9565b610c658185610ffd565b9350610c7083610f83565b8060005b83811015610ca1578151610c888882610b47565b9750610c9383610fce565b925050600181019050610c74565b5085935050505092915050565b610cb781611054565b82525050565b600061012083016000830151610cd66000860182610cae565b5060208301518482036020860152610cee8282610c50565b9150506040830151610d036040860182610e4e565b506060830151610d166060860182610cae565b5060808301518482036080860152610d2e8282610c50565b91505060a083015184820360a0860152610d488282610c50565b91505060c0830151610d5d60c0860182610cae565b5060e0830151610d7060e0860182610e4e565b50610100830151610d85610100860182610e4e565b508091505092915050565b61010082016000820151610da76000850182610cae565b506020820151610dba6020850182610e4e565b506040820151610dcd6040850182610b5f565b506060820151610de06060850182610cae565b506080820151610df36080850182610e1f565b5060a0820151610e0660c0850182610e4e565b5060c0820151610e1960e0850182610e4e565b50505050565b604082016000820151610e356000850182610e4e565b506020820151610e486020850182610e4e565b50505050565b610e5781611080565b82525050565b610e6681611080565b82525050565b6000602082019050610e816000830184610b6e565b92915050565b60006020820190508181036000830152610ea18184610b7d565b905092915050565b60006020820190508181036000830152610ec38184610bf2565b905092915050565b6000602082019050610ee06000830184610e5d565b92915050565b6000610ef0610f01565b9050610efc828261108a565b919050565b6000604051905090565b600067ffffffffffffffff821115610f2657610f25611133565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610f5257610f51611133565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061101982611080565b915061102483611080565b92508282101561103757611036611104565b5b828203905092915050565b600061104d82611060565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61109382611162565b810181811067ffffffffffffffff821117156110b2576110b1611133565b5b80604052505050565b60006110c682611080565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110f9576110f8611104565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61117c81611042565b811461118757600080fd5b50565b61119381611054565b811461119e57600080fd5b50565b6111aa81611080565b81146111b557600080fd5b5056fea2646970667358221220ebce306ec4ba834c3a0400e68bbbc089fe8e6aa8e7e4f3ec79ef0deb80d9454864736f6c63430008040033";

type GettersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GettersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Getters__factory extends ContractFactory {
  constructor(...args: GettersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Getters> {
    return super.deploy(_gameCore, overrides || {}) as Promise<Getters>;
  }
  getDeployTransaction(
    _gameCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameCore, overrides || {});
  }
  attach(address: string): Getters {
    return super.attach(address) as Getters;
  }
  connect(signer: Signer): Getters__factory {
    return super.connect(signer) as Getters__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GettersInterface {
    return new utils.Interface(_abi) as GettersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Getters {
    return new Contract(address, _abi, signerOrProvider) as Getters;
  }
}
