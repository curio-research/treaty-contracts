/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Permission, PermissionInterface } from "../Permission";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_bool",
        type: "bool",
      },
    ],
    name: "setPermission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ae806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ec6263c014610030575b600080fd5b61004a600480360381019061004591906100d0565b61004c565b005b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000813590506100b58161014a565b92915050565b6000813590506100ca81610161565b92915050565b600080604083850312156100e357600080fd5b60006100f1858286016100a6565b9250506020610102858286016100bb565b9150509250929050565b60006101178261012a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101538161010c565b811461015e57600080fd5b50565b61016a8161011e565b811461017557600080fd5b5056fea264697066735822122093ee5d52faa88ee375ad00a08762cce1b24d978602c00f65511356a01507d21164736f6c63430008040033";

type PermissionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PermissionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Permission__factory extends ContractFactory {
  constructor(...args: PermissionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Permission> {
    return super.deploy(overrides || {}) as Promise<Permission>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Permission {
    return super.attach(address) as Permission;
  }
  connect(signer: Signer): Permission__factory {
    return super.connect(signer) as Permission__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PermissionInterface {
    return new utils.Interface(_abi) as PermissionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Permission {
    return new Contract(address, _abi, signerOrProvider) as Permission;
  }
}
