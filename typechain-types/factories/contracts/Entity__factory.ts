/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Entity, EntityInterface } from "../../contracts/Entity";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220a561ec1f26d6f10f2272b4b92309fe6e3d425e691f90a9d0404fafe564b92f1064736f6c63430008040033";

type EntityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EntityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Entity__factory extends ContractFactory {
  constructor(...args: EntityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Entity> {
    return super.deploy(overrides || {}) as Promise<Entity>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Entity {
    return super.attach(address) as Entity;
  }
  override connect(signer: Signer): Entity__factory {
    return super.connect(signer) as Entity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EntityInterface {
    return new utils.Interface(_abi) as EntityInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Entity {
    return new Contract(address, _abi, signerOrProvider) as Entity;
  }
}
