/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { NATO, NATOInterface } from "../../../contracts/treaties/NATO";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_diamond",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "approveMoveArmy",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "denounceTreaty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "diamond",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isMemberStates",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "joinTreaty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "memberStates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161076138038061076183398101604081905261002f91610116565b600080546001600160a01b0319166001600160a01b0383161790556040805160608101909152602280825261073f602083013980516100769160019160209091019061007d565b5050610180565b82805461008990610146565b90600052602060002090601f0160209004810192826100ab57600085556100f1565b82601f106100c457805160ff19168380011785556100f1565b828001600101855582156100f1579182015b828111156100f15782518255916020019190600101906100d6565b506100fd929150610101565b5090565b5b808211156100fd5760008155600101610102565b60006020828403121561012857600080fd5b81516001600160a01b038116811461013f57600080fd5b9392505050565b600181811c9082168061015a57607f821691505b60208210810361017a57634e487b7160e01b600052602260045260246000fd5b50919050565b6105b08061018f6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806399665ca31161005b57806399665ca3146100e3578063a67a6bbe146100eb578063a9a7aef914610157578063f0b7db4e1461017a57600080fd5b806306fdde031461008257806314b0528e146100a05780636008e5b7146100b8575b600080fd5b61008a61018d565b6040516100979190610430565b60405180910390f35b6100a861021b565b6040519015158152602001610097565b6100cb6100c6366004610485565b610358565b6040516001600160a01b039091168152602001610097565b6100a8610382565b6100a86002805460018181019092557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace01805473ffffffffffffffffffffffffffffffffffffffff1916339081179091556000908152600360205260409020805460ff19168217905590565b6100a861016536600461049e565b60036020526000908152604090205460ff1681565b6000546100cb906001600160a01b031681565b6001805461019a906104ce565b80601f01602080910402602001604051908101604052809291908181526020018280546101c6906104ce565b80156102135780601f106101e857610100808354040283529160200191610213565b820191906000526020600020905b8154815290600101906020018083116101f657829003601f168201915b505050505081565b6002546000903390825b8181101561027657826001600160a01b03166002828154811061024a5761024a610508565b6000918252602090912001546001600160a01b031614610276578061026e81610534565b915050610225565b600261028360018461054d565b8154811061029357610293610508565b600091825260209091200154600280546001600160a01b0390921691839081106102bf576102bf610508565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060028054806102fe576102fe610564565b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff191690559092019092556001600160a01b039490941681526003909352505060409020805460ff1916905550600190565b6002818154811061036857600080fd5b6000918252602090912001546001600160a01b0316905081565b3360008181526003602052604081205490919060ff16610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4e41544f3a204e6174696f6e206973206e6f7420626f756e642062792074686560448201527f2054726561747900000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b600191505090565b600060208083528351808285015260005b8181101561045d57858101830151858201604001528201610441565b8181111561046f576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561049757600080fd5b5035919050565b6000602082840312156104b057600080fd5b81356001600160a01b03811681146104c757600080fd5b9392505050565b600181811c908216806104e257607f821691505b60208210810361050257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016105465761054661051e565b5060010190565b60008282101561055f5761055f61051e565b500390565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200c7dd6992d2bf33e3f54f6656d17c033e7a04b1be48ba223a3b6a59dc260853364736f6c634300080d00334e6f7274682041746c616e74696320547265617479204f7267616e697a6174696f6e";

type NATOConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NATOConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NATO__factory extends ContractFactory {
  constructor(...args: NATOConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _diamond: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NATO> {
    return super.deploy(_diamond, overrides || {}) as Promise<NATO>;
  }
  override getDeployTransaction(
    _diamond: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_diamond, overrides || {});
  }
  override attach(address: string): NATO {
    return super.attach(address) as NATO;
  }
  override connect(signer: Signer): NATO__factory {
    return super.connect(signer) as NATO__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NATOInterface {
    return new utils.Interface(_abi) as NATOInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NATO {
    return new Contract(address, _abi, signerOrProvider) as NATO;
  }
}
