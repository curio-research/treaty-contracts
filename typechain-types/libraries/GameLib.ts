/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common';

export type PositionStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
};

export type PositionStructOutput = [BigNumber, BigNumber] & {
  x: BigNumber;
  y: BigNumber;
};

export type TileStruct = {
  isInitialized: PromiseOrValue<boolean>;
  terrain: PromiseOrValue<BigNumberish>;
};

export type TileStructOutput = [boolean, number] & {
  isInitialized: boolean;
  terrain: number;
};

export interface GameLibInterface extends utils.Interface {
  functions: {
    'adjacent((uint256,uint256),(uint256,uint256))': FunctionFragment;
    'adjacentToCity((uint256,uint256),uint256)': FunctionFragment;
    '_barbarianInfantrySelector(uint256)': FunctionFragment;
    'coincident((uint256,uint256),(uint256,uint256))': FunctionFragment;
    'connected((uint256,uint256)[])': FunctionFragment;
    'euclidean((uint256,uint256),(uint256,uint256))': FunctionFragment;
    'getBattleDamages(uint256,uint256,uint256)': FunctionFragment;
    'getCityTileCountByLevel(uint256)': FunctionFragment;
    'getMapTileAt((uint256,uint256))': FunctionFragment;
    'getNeighbors((uint256,uint256))': FunctionFragment;
    'getPlayer(address)': FunctionFragment;
    'getSettlerHealthAndSpeedByLevel(uint256)': FunctionFragment;
    '_goldLevelSelector(uint256)': FunctionFragment;
    'inBound((uint256,uint256))': FunctionFragment;
    'random(uint256,uint256)': FunctionFragment;
    'strEq(string,string)': FunctionFragment;
    'sum(uint256[])': FunctionFragment;
    'withinDistance((uint256,uint256),(uint256,uint256),uint256)': FunctionFragment;
    'activePlayerCheck(address)': FunctionFragment;
    'entityOwnershipCheck(uint256,address)': FunctionFragment;
    'ongoingGameCheck()': FunctionFragment;
    'inboundPositionCheck((uint256,uint256))': FunctionFragment;
    'validEntityCheck(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'adjacent'
      | 'adjacentToCity'
      | '_barbarianInfantrySelector'
      | 'coincident'
      | 'connected'
      | 'euclidean'
      | 'getBattleDamages'
      | 'getCityTileCountByLevel'
      | 'getMapTileAt'
      | 'getNeighbors'
      | 'getPlayer'
      | 'getSettlerHealthAndSpeedByLevel'
      | '_goldLevelSelector'
      | 'inBound'
      | 'random'
      | 'strEq'
      | 'sum'
      | 'withinDistance'
      | 'activePlayerCheck'
      | 'entityOwnershipCheck'
      | 'ongoingGameCheck'
      | 'inboundPositionCheck'
      | 'validEntityCheck'
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'adjacent', values: [PositionStruct, PositionStruct]): string;
  encodeFunctionData(functionFragment: 'adjacentToCity', values: [PositionStruct, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: '_barbarianInfantrySelector', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'coincident', values: [PositionStruct, PositionStruct]): string;
  encodeFunctionData(functionFragment: 'connected', values: [PositionStruct[]]): string;
  encodeFunctionData(functionFragment: 'euclidean', values: [PositionStruct, PositionStruct]): string;
  encodeFunctionData(functionFragment: 'getBattleDamages', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getCityTileCountByLevel', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getMapTileAt', values: [PositionStruct]): string;
  encodeFunctionData(functionFragment: 'getNeighbors', values: [PositionStruct]): string;
  encodeFunctionData(functionFragment: 'getPlayer', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getSettlerHealthAndSpeedByLevel', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: '_goldLevelSelector', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'inBound', values: [PositionStruct]): string;
  encodeFunctionData(functionFragment: 'random', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'strEq', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'sum', values: [PromiseOrValue<BigNumberish>[]]): string;
  encodeFunctionData(functionFragment: 'withinDistance', values: [PositionStruct, PositionStruct, PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'activePlayerCheck', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'entityOwnershipCheck', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'ongoingGameCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'inboundPositionCheck', values: [PositionStruct]): string;
  encodeFunctionData(functionFragment: 'validEntityCheck', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'adjacent', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'adjacentToCity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_barbarianInfantrySelector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'coincident', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'connected', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'euclidean', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBattleDamages', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCityTileCountByLevel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMapTileAt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNeighbors', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getPlayer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSettlerHealthAndSpeedByLevel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: '_goldLevelSelector', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inBound', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'random', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'strEq', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sum', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withinDistance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'activePlayerCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'entityOwnershipCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ongoingGameCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inboundPositionCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validEntityCheck', data: BytesLike): Result;

  events: {
    'GamePaused()': EventFragment;
    'GameResumed()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'GamePaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GameResumed'): EventFragment;
}

export interface GamePausedEventObject {}
export type GamePausedEvent = TypedEvent<[], GamePausedEventObject>;

export type GamePausedEventFilter = TypedEventFilter<GamePausedEvent>;

export interface GameResumedEventObject {}
export type GameResumedEvent = TypedEvent<[], GameResumedEventObject>;

export type GameResumedEventFilter = TypedEventFilter<GameResumedEvent>;

export interface GameLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameLibInterface;

  queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjacent(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<[boolean]>;

    adjacentToCity(_position: PositionStruct, _cityID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    _barbarianInfantrySelector(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    coincident(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<[boolean]>;

    connected(_positions: PositionStruct[], overrides?: CallOverrides): Promise<[boolean]>;

    euclidean(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBattleDamages(_army1: PromiseOrValue<BigNumberish>, _army2: PromiseOrValue<BigNumberish>, _duration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { _damageOn1: BigNumber; _damageOn2: BigNumber }>;

    getCityTileCountByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getMapTileAt(_position: PositionStruct, overrides?: CallOverrides): Promise<[TileStructOutput]>;

    getNeighbors(_position: PositionStruct, overrides?: CallOverrides): Promise<[PositionStructOutput[]]>;

    getPlayer(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getSettlerHealthAndSpeedByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    _goldLevelSelector(_goldLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<[boolean]>;

    random(_max: PromiseOrValue<BigNumberish>, _salt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    strEq(_s1: PromiseOrValue<string>, _s2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>;

    sum(_arr: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<[BigNumber]>;

    withinDistance(_p1: PositionStruct, _p2: PositionStruct, _dist: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>;

    activePlayerCheck(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;

    entityOwnershipCheck(_entity: PromiseOrValue<BigNumberish>, _player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[void]>;

    ongoingGameCheck(overrides?: CallOverrides): Promise<[void]>;

    inboundPositionCheck(_position: PositionStruct, overrides?: CallOverrides): Promise<[void]>;

    validEntityCheck(_entity: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[void]>;
  };

  adjacent(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

  adjacentToCity(_position: PositionStruct, _cityID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  _barbarianInfantrySelector(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  coincident(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

  connected(_positions: PositionStruct[], overrides?: CallOverrides): Promise<boolean>;

  euclidean(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

  getBattleDamages(_army1: PromiseOrValue<BigNumberish>, _army2: PromiseOrValue<BigNumberish>, _duration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { _damageOn1: BigNumber; _damageOn2: BigNumber }>;

  getCityTileCountByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getMapTileAt(_position: PositionStruct, overrides?: CallOverrides): Promise<TileStructOutput>;

  getNeighbors(_position: PositionStruct, overrides?: CallOverrides): Promise<PositionStructOutput[]>;

  getPlayer(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getSettlerHealthAndSpeedByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  _goldLevelSelector(_goldLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

  random(_max: PromiseOrValue<BigNumberish>, _salt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  strEq(_s1: PromiseOrValue<string>, _s2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

  sum(_arr: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;

  withinDistance(_p1: PositionStruct, _p2: PositionStruct, _dist: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

  activePlayerCheck(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

  entityOwnershipCheck(_entity: PromiseOrValue<BigNumberish>, _player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

  ongoingGameCheck(overrides?: CallOverrides): Promise<void>;

  inboundPositionCheck(_position: PositionStruct, overrides?: CallOverrides): Promise<void>;

  validEntityCheck(_entity: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

  callStatic: {
    adjacent(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

    adjacentToCity(_position: PositionStruct, _cityID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    _barbarianInfantrySelector(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    coincident(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

    connected(_positions: PositionStruct[], overrides?: CallOverrides): Promise<boolean>;

    euclidean(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    getBattleDamages(_army1: PromiseOrValue<BigNumberish>, _army2: PromiseOrValue<BigNumberish>, _duration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { _damageOn1: BigNumber; _damageOn2: BigNumber }>;

    getCityTileCountByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getMapTileAt(_position: PositionStruct, overrides?: CallOverrides): Promise<TileStructOutput>;

    getNeighbors(_position: PositionStruct, overrides?: CallOverrides): Promise<PositionStructOutput[]>;

    getPlayer(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSettlerHealthAndSpeedByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    _goldLevelSelector(_goldLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<boolean>;

    random(_max: PromiseOrValue<BigNumberish>, _salt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    strEq(_s1: PromiseOrValue<string>, _s2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>;

    sum(_arr: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;

    withinDistance(_p1: PositionStruct, _p2: PositionStruct, _dist: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>;

    activePlayerCheck(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    entityOwnershipCheck(_entity: PromiseOrValue<BigNumberish>, _player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;

    ongoingGameCheck(overrides?: CallOverrides): Promise<void>;

    inboundPositionCheck(_position: PositionStruct, overrides?: CallOverrides): Promise<void>;

    validEntityCheck(_entity: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'GamePaused()'(): GamePausedEventFilter;
    GamePaused(): GamePausedEventFilter;

    'GameResumed()'(): GameResumedEventFilter;
    GameResumed(): GameResumedEventFilter;
  };

  estimateGas: {
    adjacent(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    adjacentToCity(_position: PositionStruct, _cityID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    _barbarianInfantrySelector(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    coincident(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    connected(_positions: PositionStruct[], overrides?: CallOverrides): Promise<BigNumber>;

    euclidean(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    getBattleDamages(_army1: PromiseOrValue<BigNumberish>, _army2: PromiseOrValue<BigNumberish>, _duration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getCityTileCountByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getMapTileAt(_position: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    getNeighbors(_position: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    getPlayer(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getSettlerHealthAndSpeedByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    _goldLevelSelector(_goldLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    random(_max: PromiseOrValue<BigNumberish>, _salt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    strEq(_s1: PromiseOrValue<string>, _s2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    sum(_arr: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<BigNumber>;

    withinDistance(_p1: PositionStruct, _p2: PositionStruct, _dist: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    activePlayerCheck(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    entityOwnershipCheck(_entity: PromiseOrValue<BigNumberish>, _player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    ongoingGameCheck(overrides?: CallOverrides): Promise<BigNumber>;

    inboundPositionCheck(_position: PositionStruct, overrides?: CallOverrides): Promise<BigNumber>;

    validEntityCheck(_entity: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adjacent(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    adjacentToCity(_position: PositionStruct, _cityID: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _barbarianInfantrySelector(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coincident(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    connected(_positions: PositionStruct[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    euclidean(_p1: PositionStruct, _p2: PositionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBattleDamages(_army1: PromiseOrValue<BigNumberish>, _army2: PromiseOrValue<BigNumberish>, _duration: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCityTileCountByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMapTileAt(_position: PositionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNeighbors(_position: PositionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayer(_address: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettlerHealthAndSpeedByLevel(_level: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _goldLevelSelector(_goldLevel: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inBound(_p: PositionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    random(_max: PromiseOrValue<BigNumberish>, _salt: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strEq(_s1: PromiseOrValue<string>, _s2: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sum(_arr: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withinDistance(_p1: PositionStruct, _p2: PositionStruct, _dist: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePlayerCheck(_player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entityOwnershipCheck(_entity: PromiseOrValue<BigNumberish>, _player: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ongoingGameCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inboundPositionCheck(_position: PositionStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validEntityCheck(_entity: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
